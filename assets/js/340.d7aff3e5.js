(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{283:function(t,e,v){"use strict";v.r(e);var _=v(0),a=Object(_.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("div",{staticClass:"content"},[v("h2",{attrs:{id:"regexp-prototype-exec"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#regexp-prototype-exec","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp.prototype.exec()")]),t._v(" "),v("p",[v("code",[t._v("exec()")]),t._v(" 方法专门为捕获组而设计，该方法在一个指定字符串中执行一个搜索匹配。然后返回包含匹配项信息的数组，在没有匹配项的情况下返回 "),v("code",[t._v("null")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"语法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),v("div",{staticClass:"language-javascript extra-class"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[t._v("regExpObject"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("h3",{attrs:{id:"参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("参数")]),t._v(" "),v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("regExpObject")])]),t._v(" "),v("td",[v("code",[t._v("RegExp")]),t._v(" 类型")]),t._v(" "),v("td",[t._v("匹配的正则表达式。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("str")])]),t._v(" "),v("td",[v("code",[t._v("String")]),t._v(" 类型")]),t._v(" "),v("td",[t._v("指定的字符串。将在该字符串中执行搜索。")])])])]),t._v(" "),v("h3",{attrs:{id:"返回值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#返回值","aria-hidden":"true"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),v("ul",[v("li",[t._v("如果匹配成功，"),v("code",[t._v("exec()")]),t._v(" 方法返回一个数组，并更新正则表达式对象的属性。返回的数组将完全匹配成功的文本作为第一项，将正则括号里匹配成功的作为数组填充到后面。")]),t._v(" "),v("li",[t._v("如果匹配失败，"),v("code",[t._v("exec()")]),t._v(" 方法返回 "),v("code",[t._v("null")]),t._v("。")])]),t._v(" "),v("p",[t._v("返回的数组包含两个额外的属性。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("属性")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("index")])]),t._v(" "),v("td",[t._v("表示匹配项在字符串的位置")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("input")])]),t._v(" "),v("td",[t._v("表示应用正则表达式的字符串")])])])]),t._v(" "),v("h2",{attrs:{id:"示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),v("div",{staticClass:"language-javascript extra-class"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Match "quick brown" followed by "jumps", ignoring characters in between')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Remember "brown" and "jumps"')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ignore case")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/quick\\s(brown).+?(jumps)/ig")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regexp"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The Quick Brown Fox Jumps Over The Lazy Dog'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("下表列出这个脚本的返回值：")]),t._v(" "),v("p",[v("strong",[t._v("对象 result")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("属性/索引")]),t._v(" "),v("th",[t._v("描述")]),t._v(" "),v("th",[t._v("例子")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("[0]")])]),t._v(" "),v("td",[t._v("匹配的全部字符串")]),t._v(" "),v("td",[v("code",[t._v("'Quick Brown Fox Jumps'")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[1],...,[n]")])]),t._v(" "),v("td",[t._v("括号中的分组捕获")]),t._v(" "),v("td",[v("code",[t._v("[1] = Brown")]),t._v(" "),v("code",[t._v("[2] = Jumps")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("index")])]),t._v(" "),v("td",[t._v("匹配到的字符位于原始字符串的基于0的索引值")]),t._v(" "),v("td",[v("code",[t._v("4")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("input")])]),t._v(" "),v("td",[t._v("原始字符串")]),t._v(" "),v("td",[v("code",[t._v("'The Quick Brown Fox Jumps Over The Lazy Dog'")])])])])]),t._v(" "),v("p",[v("strong",[t._v("对象 regexp")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("属性/索引")]),t._v(" "),v("th",[t._v("描述")]),t._v(" "),v("th",[t._v("例子")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("lastIndex")])]),t._v(" "),v("td",[t._v("下一次匹配开始的位置")]),t._v(" "),v("td",[v("code",[t._v("25")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("ignoreCase")])]),t._v(" "),v("td",[t._v("是否使用了'i'标记使正则匹配忽略大小写")]),t._v(" "),v("td",[v("code",[t._v("true")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("global")])]),t._v(" "),v("td",[t._v("是否使用了'g'标记来进行全局的匹配")]),t._v(" "),v("td",[v("code",[t._v("true")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("multiline")])]),t._v(" "),v("td",[t._v("是否使用了'm'标记使正则工作在多行模式（也就是，^ 和 $ 可以匹配字符串中每一行的开始和结束（行是由 \\n 或 \\r 分割的），而不只是整个输入字符串的最开始和最末尾处。）")]),t._v(" "),v("td",[v("code",[t._v("false")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("source")])]),t._v(" "),v("td",[t._v("正则匹配的字符串")]),t._v(" "),v("td",[v("code",[t._v("quick\\s(brown).+?(jumps)")])])])])])])}],!1,null,null,null);e.default=a.exports}}]);