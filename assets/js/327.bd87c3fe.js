(window.webpackJsonp=window.webpackJsonp||[]).push([[327],{326:function(t,a,s){"use strict";s.r(a);var r=s(0),n=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"类型化数组（typed-array）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型化数组（typed-array）","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型化数组（Typed Array）")]),t._v(" "),s("p",[t._v("JavaScript 类型化数组是一种类似数组的对象，并提供了一种用于访问原始二进制数据的机制。 正如你可能已经知道，"),s("code",[t._v("Array")]),t._v(" 存储的对象能动态增多和减少，并且可以存储任何 JavaScript 值。JavaScript 引擎会做一些内部优化，以便对数组的操作可以很快。然而，随着 Web 应用程序变得越来越强大，尤其一些新增加的功能例如：音频视频编辑，访问 WebSockets 的原始数据等，很明显有些时候如果使用 JavaScript 代码可以快速方便地通过类型化数组来操作原始的二进制数据将会非常有帮助。")]),t._v(" "),s("p",[t._v("但是，不要把类型化数组与正常数组混淆，因为在类型数组上调用 "),s("code",[t._v("Array.isArray()")]),t._v(" 会返回 "),s("code",[t._v("false")]),t._v("。此外，并不是所有可用于正常数组的方法都能被类型化数组所支持（如 "),s("code",[t._v("push")]),t._v(" 和 "),s("code",[t._v("pop")]),t._v("）。")]),t._v(" "),s("p",[t._v("可以使用类型化数组来处理来自网络协议、二进制文件格式和原始图形缓冲区等源的二进制数据。类型化数组还可用于管理具有已知字节布局的内存中二进制数据。")]),t._v(" "),s("h2",{attrs:{id:"缓冲和视图：类型数组架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓冲和视图：类型数组架构","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓冲和视图：类型数组架构")]),t._v(" "),s("p",[t._v("为了达到最大的灵活性和效率，JavaScript 类型数组（Typed Arrays）将实现拆分为"),s("strong",[t._v("缓冲")]),t._v("和"),s("strong",[t._v("视图")]),t._v("两部分。一个缓冲（由 "),s("code",[t._v("ArrayBuffer")]),t._v(" 对象实现）描述的是一个数据块。缓冲没有格式可言，并且不提供机制访问其内容。为了访问在缓冲对象中包含的内存，你需要使用视图。视图提供了上下文 — 即数据类型、起始偏移量和元素数 — 将数据转换为实际有类型的数组。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://mdn.mozillademos.org/files/8629/typed_arrays.png",alt:"ArrayBuffer"}})]),t._v(" "),s("h3",{attrs:{id:"数组缓冲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组缓冲","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组缓冲")]),t._v(" "),s("p",[s("code",[t._v("ArrayBuffer")]),t._v(" 是一种数据类型，用来表示一个通用的、固定长度的二进制数据缓冲区。你不能直接操纵一个  "),s("code",[t._v("ArrayBuffer")]),t._v(" 中的内容；你需要创建一个类型化数组的视图或一个描述缓冲数据格式的 "),s("code",[t._v("DataView")]),t._v("，使用它们来读写缓冲区中的内容。")]),t._v(" "),s("h3",{attrs:{id:"类型化数组视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型化数组视图","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型化数组视图")]),t._v(" "),s("p",[t._v("类型化数组的类型表示可对其创建索引和进行操作的 "),s("code",[t._v("ArrayBuffer")]),t._v(" 对象的视图。所有数组类型都具有固定长度。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("大小（以字节为单位）")]),t._v(" "),s("th",[t._v("描述")]),t._v(" "),s("th",[t._v("Web IDL类型")]),t._v(" "),s("th",[t._v("Equivalent C type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("Int8Array")])]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("8 位补码带符号整数")]),t._v(" "),s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("int8_t")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Uint8Array")])]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("8 位无符号整数")]),t._v(" "),s("td",[t._v("octet")]),t._v(" "),s("td",[t._v("uint8_t")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Uint8ClampedArray")])]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("8 位无符号整数（Clamped）")]),t._v(" "),s("td",[t._v("octet")]),t._v(" "),s("td",[t._v("uint8_t")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Int16Array")])]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("16 位补码带符号整数")]),t._v(" "),s("td",[t._v("short")]),t._v(" "),s("td",[t._v("int16_t")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Uint16Array")])]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("16 位无符号整数")]),t._v(" "),s("td",[t._v("unsigned short")]),t._v(" "),s("td",[t._v("uint16_t")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Int32Array")])]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("32 位补码带符号整数")]),t._v(" "),s("td",[t._v("long")]),t._v(" "),s("td",[t._v("int32_t")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Uint32Array")])]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("32 位无符号整数")]),t._v(" "),s("td",[t._v("unsigned short")]),t._v(" "),s("td",[t._v("uint32_t")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Float32Array")])]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("32 位 IEEE 浮点")]),t._v(" "),s("td",[t._v("unrestricted float")]),t._v(" "),s("td",[t._v("float")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("Float64Array")])]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("64 位 IEEE 浮点")]),t._v(" "),s("td",[t._v("unrestricted double")]),t._v(" "),s("td",[t._v("double")])])])]),t._v(" "),s("h3",{attrs:{id:"数据视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据视图","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据视图")]),t._v(" "),s("p",[s("code",[t._v("DataView")]),t._v(" 是一种底层接口，它提供有可以操作缓冲区中任意数据的读写接口。这对操作不同类型数据的场景很有帮助，例如：类型化数组视图都是运行在本地字节序模式（参考 Endianness），可以通过使用 "),s("code",[t._v("DataView")]),t._v("来控制字节序。默认是大端字节序（Big-endian），但可以调用读写接口改为小端字节序（Little-endian）。")]),t._v(" "),s("h2",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("h3",{attrs:{id:"使用视图和缓冲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用视图和缓冲","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用视图和缓冲")]),t._v(" "),s("p",[t._v("首先，我们创建一个16字节固定长度的缓冲：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var buffer = new ArrayBuffer(16);\n")])])]),s("p",[t._v("现在我们有了一段初始化为0的内存，目前还做不了什么太多操作。让我们确认一下数据的字节长度：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("byteLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yes, it\'s 16 bytes."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Oh no, it\'s the wrong size!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在实际开始操作这个缓冲之前，需要创建一个视图。我们将创建一个视图，此视图将把缓冲内的数据格式化为一个32位的有符号整数数组：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" int32View "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int32Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("现在我们可以像普通数组一样访问该数组中的元素：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" int32View"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  int32View"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("该代码会将数组以0, 2, 4和6填充 （一共4个4字节元素，所以总长度为16字节）。")]),t._v(" "),s("h3",{attrs:{id:"同一数据的多个视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同一数据的多个视图","aria-hidden":"true"}},[t._v("#")]),t._v(" 同一数据的多个视图")]),t._v(" "),s("p",[t._v("更有意思的是，你可以在同一数据上创建多个视图。例如：基于上文的代码，我们可以添加如下代码处理：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" int16View "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int16Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" int16View"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entry "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" int16View"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这里我们创建了一个2字节整数视图，该视图共享上文的4字节整数视图的缓冲，然后以2字节整数打印出缓冲里的数据，这次我们会得到0, 0, 2, 0, 4, 0, 6, 0这样的输出。")]),t._v(" "),s("p",[t._v("那么，这样呢？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("int16View"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Entry 0 in the 32-bit array is now "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" int32View"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v('这次的输出是"Entry 0 in the 32-bit array is now 32"。也就是，这2个数组都是同一数据的以不同格式展示出来的视图。你可以使用任何一种 '),s("a",{attrs:{href:"#%E7%B1%BB%E5%9E%8B%E5%8C%96%E6%95%B0%E7%BB%84%E8%A7%86%E5%9B%BE"}},[t._v("view types")]),t._v(" 中的定义的视图。")])])}],!1,null,null,null);a.default=n.exports}}]);