(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{166:function(t,e,a){t.exports=a.p+"assets/img/32562efa-aa5c-4794-8467-7d3890658f45.66df8d7c.jpg"},167:function(t,e,a){t.exports=a.p+"assets/img/d8e49c3e-09a5-4500-a7eb-4771dc72e5b7.fe804ad6.jpg"},168:function(t,e,a){t.exports=a.p+"assets/img/015b9eb7-2775-4e52-a463-f33c50ff9f59.c290457d.jpg"},169:function(t,e,a){t.exports=a.p+"assets/img/2265488a-c2cf-44cc-afdb-1cd635553f2c.b57a4145.jpg"},170:function(t,e,a){t.exports=a.p+"assets/img/83ffd92b-edb3-4758-bf4a-4f7a898057b4.ad5621fd.jpg"},171:function(t,e,a){t.exports=a.p+"assets/img/d7c86704-02e0-487f-895d-121a704cf787.315506c0.jpg"},172:function(t,e,a){t.exports=a.p+"assets/img/4a1308d9-21fd-4ae1-8f0d-5a58debfb438.f27dfbc7.jpg"},173:function(t,e,a){t.exports=a.p+"assets/img/fc5bdca9-b4c1-41ba-8f50-e3b01f9e70bb.22d3c659.jpg"},174:function(t,e,a){t.exports=a.p+"assets/img/e42e757b-ede3-4681-9e06-11cdfb22299a.e5dfc520.jpg"},175:function(t,e,a){t.exports=a.p+"assets/img/3456dae3-6ac6-4a02-b912-2b6d003e1c38.ccf8dc23.jpg"},364:function(t,e,a){"use strict";a.r(e);var s=[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"http缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("📖 "),e("strong",[this._v("快速目录：")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[a("a",{attrs:{href:"#%E5%BC%BA%E7%BC%93%E5%AD%98"}},[t._v("强缓存")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%BC%BA%E7%BC%93%E5%AD%98%E8%A7%84%E5%88%99"}},[t._v("强缓存规则")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%BC%BA%E7%BC%93%E5%AD%98%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5"}},[t._v("强缓存首部字段")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98"}},[t._v("协商缓存")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E8%A7%84%E5%88%99"}},[t._v("协商缓存规则")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5"}},[t._v("协商缓存首部字段")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%90%AF%E5%8F%91%E5%BC%8F%E7%BC%93%E5%AD%98%E9%98%B6%E6%AE%B5"}},[t._v("启发式缓存阶段")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%B6%E4%BB%96%E7%BC%93%E5%AD%98%E5%AD%97%E6%AE%B5"}},[t._v("其他缓存字段")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9C%80%E4%BD%B3%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5"}},[t._v("最佳优化策略")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E7%BC%93%E5%AD%98%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B"}},[t._v("缓存资源类型")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90"}},[t._v("用户行为分析")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E9%98%BB%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90"}},[t._v("阻止浏览器缓存静态资源")])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"缓存类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 缓存类型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("浏览器与服务器通信的方式为应答模式，即："),e("strong",[this._v("浏览器发起HTTP请求 – 服务器响应该请求")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(166),alt:"浏览器缓存过程分析"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("浏览器每次发起请求，都会先在浏览器缓存中"),e("strong",[this._v("查找")]),this._v("该请求的结果以及缓存标识")]),this._v(" "),e("li",[this._v("浏览器每次拿到返回的请求结果都会将该结果和缓存标识"),e("strong",[this._v("存入")]),this._v("浏览器缓存中")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为了方便大家理解，这里我们根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是"),e("strong",[this._v("强缓存")]),this._v("和"),e("strong",[this._v("协商缓存")]),this._v(" 。")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",[t._v("HTTP缓存")]),t._v(" "),a("th",[t._v("HTTP状态码")]),t._v(" "),a("th",[t._v("缓存位置")]),t._v(" "),a("th",[t._v("谁来决定")]),t._v(" "),a("th",[t._v("是否有效")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("强缓存")]),t._v(" "),a("td",[t._v("200")]),t._v(" "),a("td",[t._v("本地浏览器")]),t._v(" "),a("td",[t._v("本地浏览器")]),t._v(" "),a("td",[t._v("F5刷新无效，强制刷新无效")])]),t._v(" "),a("tr",[a("td",[t._v("协商缓存")]),t._v(" "),a("td",[t._v("304")]),t._v(" "),a("td",[t._v("本地浏览器")]),t._v(" "),a("td",[t._v("服务器")]),t._v(" "),a("td",[t._v("F5刷新有效，强制刷新无效")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 强缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("强缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("不存在")]),this._v("该缓存结果和缓存标识，强制缓存"),e("strong",[this._v("失效")]),this._v("，则直接向服务器发起请求（跟首次发起请求一致）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(167),alt:"强制缓存失效，直接向服务器请求"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("存在")]),this._v("该缓存结果和缓存标识，但该"),e("strong",[this._v("结果已失效")]),this._v("，强缓存失效，则使用协商缓存（暂不分析）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(168),alt:"强制缓存失效，使用协商缓存"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(169),alt:"强制缓存失效"}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Age:")]),t._v("23146\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Cache-Control:")]),t._v(" max-age=2592000\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Date:")]),t._v(" Tue, 28 Nov 2017 12:26:41 GMT\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("ETag:")]),t._v(' W/"5a1cf09a-63c6"\n'),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Expires:")]),t._v(" Thu, 28 Dec 2017 05:27:45 GMT\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Last-Modified:")]),t._v(" Tue, 28 Nov 2017 05:14:02 GMT\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Vary:")]),t._v(" Accept-Encoding\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以上请求头来自百度首页某个 CSS 文件的响应头。我去除了一些和缓存无关的字段，只保留了以上部分。我们来分析下，"),e("a",{attrs:{href:"#expires"}},[this._v("Expires")]),this._v(" 是 HTTP/1.0 中的定义缓存的字段，它规定了缓存过期的一个绝对时间。Cache-Control 是HTTP/1.1 定义的关于缓存的字段，max-age 为 "),e("a",{attrs:{href:"#cache-control"}},[this._v("Cache-Control")]),this._v(" 字段的其中一个指令，它规定了缓存过期的一个相对时间。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这就是"),e("strong",[this._v("强缓存阶段")]),this._v("，当浏览器再次试图访问这个 CSS 文件，发现有这个文件的缓存，那么就会根据上一次的响应判断是否过期，如果没过期，则使用该缓存。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"强缓存规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 强缓存规则")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("强制缓存的缓存规则是什么？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("⚠️ "),e("strong",[this._v("注意")]),this._v("：强制缓存的过期时间通过第一次访问服务器时返回的响应头获取。在 HTTP/1.0 和 HTTP/1.1 版本中通过不同的响应头字段实现。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(170),alt:"浏览器缓存位置"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里我们以博客的请求为例，状态码为"),e("strong",[this._v("灰色")]),this._v("的请求则代表使用了强制缓存，请求对应的 Size 值则代表该缓存存放的位置，分别为 "),e("strong",[this._v("from memory cache")]),this._v(" 和 "),e("strong",[this._v("from disk cache")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("内存缓存（from memory cache）和硬盘缓存（from disk cache）对比")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[a("strong",[t._v("内存缓存（from memory cache）")]),t._v("：内存缓存具有两个特点，分别是"),a("strong",[t._v("快速读取")]),t._v("和"),a("strong",[t._v("时效性")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("快速读取")]),t._v("：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程的内存中，占据该进程一定的内存资源，以便下次运行使用时的快速读取")]),t._v(" "),a("li",[a("strong",[t._v("时效性")]),t._v("：一旦该进程关闭，则该进程的内存则会清空")])])]),t._v(" "),a("li",[a("strong",[t._v("硬盘缓存（from disk cache）")]),t._v("：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行 I/O 操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("强制缓存只有首次请求才会与服务器通信，读取缓存资源时不会发出任何请求，资源的 Status 状态码为 200，资源的 Size 为 "),e("code",[this._v("from memory")]),this._v(" 或者 "),e("code",[this._v("from disk")]),this._v(" ，HTTP1.1 版本的实现优先级会高于 HTTP/1.0 版本的实现。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"强缓存首部字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存首部字段","aria-hidden":"true"}},[this._v("#")]),this._v(" 强缓存首部字段")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("用于强缓存的首部字段包括 "),e("a",{attrs:{href:"#expires"}},[this._v("Expires")]),this._v(" 和 "),e("a",{attrs:{href:"#cache-control"}},[this._v("Cache-Control")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires","aria-hidden":"true"}},[this._v("#")]),this._v(" Expires")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("Expires:")]),this._v(" Tue, 01 Jan 2019 12:00:00 GMT\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("发起请求时间超过 Expires 设定时间，即表示资源缓存时间到期，会发送请求到服务器重新获取资源")]),this._v(" "),e("li",[this._v("发起请求时间在 Expires 设定时间之前，浏览器会直接读取本地缓存数据库中的信息（form memory 或 from disk）")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("expires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Thu, 30 Nov 2017 11:17:26 GMT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("🔴 "),e("strong",[this._v("弊端")]),this._v("：Expires 控制缓存的原理是使用客户端的时间与服务端返回的时间做对比，如果如果客户端与服务端的时间因为某些原因（例如时区不同；客户端和服务的有一方的时间不准确）发生误差，那么强制缓存则会直接失效，这样的话强制缓存的存在则毫无意义，因此到了 HTTP/1.1，Expires 被 Cache-Control 替代。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control","aria-hidden":"true"}},[this._v("#")]),this._v(" Cache-Control")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("指令")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("参数")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("no-cache")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("强制资源服务器再次验证")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("no-store")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不缓存请求或是响应的任何内容")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("max-age=[秒]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("缓存时长，单位是秒")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("缓存的时长，也是响应的最大的 Age 值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("min-fresh=[秒]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("必需")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("期望在指定时间内响应仍然有效")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("no-transform")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("代理不可更改媒体类型")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("only-if-cached")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从缓存获取")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("cache-extension")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("新的指令标记（token）")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("响应指令")]),this._v("：")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("指令")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("参数")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("public")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("任意一方都能缓存该资源（客户端、代理服务器等）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("private")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("可省略")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("只能特定用户缓存该资源（仅客户端可以缓存，代理服务器不可缓存）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("no-cache")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("可省略")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("缓存前必需先确认其有效性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("no-store")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不缓存请求或响应的任何内容")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("no-transform")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("代理不可更改媒体类型")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("must-revalidate")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("可缓存但必须再向源服务器进行确认")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("proxy-revalidate")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("要求中间缓存服务器（代理）对缓存的响应有效性再进行确认")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("max-age=[秒]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("缓存时长，单位是秒")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("缓存的时长，也是响应的最大的 Age 值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("s-maxage=[秒]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("必需")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("公共缓存服务器响应的最大 Age 值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("cache-extension")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("新指令标记（token）")])])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[t._v("⚠️ "),a("strong",[t._v("注意")]),t._v("： "),a("code",[t._v("no-cache")]),t._v(" 指令很多人误以为是不缓存，这是不准确的，"),a("code",[t._v("no-cache")]),t._v(" 的意思是可以缓存，但每次使用缓存前应该去向服务器验证缓存是否可用。"),a("code",[t._v("no-store")]),t._v(" 才是不缓存内容。另外部分指令也可以组合使用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("Cache-Control:")]),this._v(" max-age=100, must-revalidate, public\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(171),alt:"Cache-Control"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("HTTP 响应报文中 Expires 的时间值，是一个绝对值")]),this._v(" "),e("li",[this._v("HTTP 响应报文中 Cache-Control 为 max-age=600，是相对值")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("⚠️ "),e("strong",[this._v("注意")]),this._v("：在无法确定客户端的时间是否与服务端的时间同步的情况下，Cache-Control 相比于 Expires 是更好的选择，所以同时存在时，只有 Cache-Control 生效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 协商缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("协商缓存即强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在第一次请求服务器时，服务器会返回资源，并且返回一个资源的缓存标识，一起存到浏览器的缓存数据库。")]),this._v(" "),e("li",[this._v("当第二次请求资源时，浏览器会首先将缓存标识发送给服务器，服务器拿到标识后判断标识是否匹配\n"),e("ul",[e("li",[this._v("如果缓存标识不匹配，表示资源有更新，服务器会将新数据和新的缓存标识一起返回到浏览器")]),this._v(" "),e("li",[this._v("如果缓存标识匹配，表示资源没有更新，并且返回 304 状态码，浏览器就读取本地缓存服务器中的数据。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("协商缓存"),e("strong",[this._v("生效")]),this._v("，返回304")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(172),alt:"协商缓存生效返回304"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("协商缓存"),e("strong",[this._v("失效")]),this._v("，返回200和请求结果")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(173),alt:"协商缓存失效返回200"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"协商缓存规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 协商缓存规则")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 HTTP/1.0 版本中，首次请求资源时服务器通过 "),e("a",{attrs:{href:"#last-modified"}},[this._v("Last-Modified")]),this._v(" 来设置响应头的缓存标识，并且把资源最后修改的时间作为值填入，然后将资源返回给浏览器。当再次请求时，浏览器会首先带上 "),e("a",{attrs:{href:"#if-modified-since"}},[this._v("If-Modified-Since")]),this._v(" 请求头去访问服务器，服务器会将 If-Modified-Since 中携带的时间与资源修改的时间匹配。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("如果时间不一致，服务器会返回新的资源，并且将 Last-Modified 值"),e("strong",[this._v("更新")]),this._v("❗️，作为响应头返回给浏览器，状态码为 200，响应体 Body 中为修改后的资源内容。")]),this._v(" "),e("li",[this._v("如果时间一致，表示资源没有更新，服务器返回 304 状态码，浏览器拿到响应状态码后从本地缓存数据库中读取缓存资源。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("🔴 "),e("strong",[this._v("弊端")]),this._v("：这种方式有一个弊端，就是当服务器中的资源增加了一个字符，后来又把这个字符删掉，本身资源文件并没有发生变化，但修改时间发生了变化。当下次请求过来时，服务器也会把这个本来没有变化的资源重新返回给浏览器。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("📌 因此，在 HTTP/1.1 版本中，使用 "),e("a",{attrs:{href:"#etag"}},[this._v("ETag")]),this._v(" 和 "),e("a",{attrs:{href:"#if-none-match"}},[this._v("If-None-Match")]),this._v(" 作为缓存是否更新的标识。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("如果资源有改变，则返回状态码 200 ，Body 为新的资源体。")]),this._v(" "),e("li",[this._v("如果资源没有改变，则返回状态码 304，Body 为空，并继续使用原有缓存。")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("响应头")]),t._v(" "),a("th",[t._v("请求头")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("可选值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("优先级")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("优缺点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("LastModified")]),t._v(" "),a("td",[t._v("If-Modified-Since")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("GMT时间")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("依次比较，排序靠后")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("修改并不意味着改变；秒级判断")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ETag")]),t._v(" "),a("td",[t._v("If-None-Match")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("校验值")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("依次比较，先比较")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("使用系统默认的 Hash 算法，再分布式部署中会导致不同服务器的 ETag 值一直")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"协商缓存首部字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存首部字段","aria-hidden":"true"}},[this._v("#")]),this._v(" 协商缓存首部字段")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v("HTTP/1.0\n"),a("ul",[a("li",[t._v("资源响应头："),a("a",{attrs:{href:"#last-modified"}},[t._v("Last-Modified")])]),t._v(" "),a("li",[t._v("协商请求头："),a("a",{attrs:{href:"#if-modified-since"}},[t._v("If-Modified-Since")]),t._v("、"),a("a",{attrs:{href:"#if-unmodified-since"}},[t._v("If-Unmodified-Since")])])])]),t._v(" "),a("li",[t._v("HTTP/1.1\n"),a("ul",[a("li",[t._v("资源响应头："),a("a",{attrs:{href:"#etag"}},[t._v("ETag")])]),t._v(" "),a("li",[t._v("协商请求头："),a("a",{attrs:{href:"#if-none-match"}},[t._v("If-None-Match")]),t._v("、"),a("a",{attrs:{href:"#if-match"}},[t._v("If-Match")])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"last-modified"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified","aria-hidden":"true"}},[this._v("#")]),this._v(" Last-Modified")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在浏览器"),e("strong",[this._v("首次请求")]),this._v("某个 URL 时，服务器端的返回状态码会是200，响应的实体内容是客户端请求的资源，同时有一个 Last-Modified 的属性标记此文件在服务器端最后被修改的时间。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[this._v("last-modified : Fri , 12 May 2006 18:53:33 GMT \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(174),alt:"Last-Modified"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("🔴 "),e("strong",[this._v("弊端")]),this._v("：使用 Last-Modified 无法准确地判断资源是否真的被修改，比如某个文件在1秒内频繁更改了多次，或者当服务器中的资源增加了一个字符，后来又把这个字符删掉，资源文件本身的实际内容并没有发生变化，但修改时间却发生了变化，而当下次请求过来时，服务器也会把这个本来没有变化但最后修改时间已经变化了的资源重新返回给浏览器。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-modified-since","aria-hidden":"true"}},[this._v("#")]),this._v(" If-Modified-Since")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("若服务器的资源最后被修改时间晚于 If-Modified-Since 的字段值（时间字符串），则重新返回资源，状态码为200")]),this._v(" "),e("li",[this._v("否则则只返回响应头，状态码304，代表资源无更新，告知浏览器资源的本地缓存仍可使用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[this._v("If-Modified-Since : Fri , 12 May 2006 18:53:33 GMT\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"if-unmodified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-unmodified-since","aria-hidden":"true"}},[this._v("#")]),this._v(" If-Unmodified-Since")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("用途：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("与含有 If-Range 消息头的范围请求搭配使用，实现断点续传的功能，即如果资源没修改继续下载，如果资源修改了，续传的意义就没有了。")]),this._v(" "),e("li",[this._v("POST、PUT 请求中，优化并发控制，即当多用户编辑用一份文档的时候，如果服务器的资源已经被修改，那么在对其作出编辑会被拒绝提交。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag","aria-hidden":"true"}},[this._v("#")]),this._v(" ETag")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("ETag 表示服务端生成的资源唯一标识（比如 MD5 标识），是 "),e("strong",[this._v("Entity Tag（实体标签）")]),this._v(" 的缩写。HTTP/1.1 协议并没有规范该值如何生成，一般而言为该资源的散列值。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("etag:")]),this._v(' W/"abc-123456"\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("ETag 的值有可能包含一个 "),e("code",[this._v("W/")]),this._v(" 前缀，来提示应该采用弱比较算法（这个是画蛇添足，因为 If-None-Match 用且仅用这一算法）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-none-match","aria-hidden":"true"}},[this._v("#")]),this._v(" If-None-Match")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("If-None-Match:")]),this._v(" abc-123456\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("对于 GET 或 HEAD 请求，当且仅当服务器上没有任何资源的 ETag 首部字段与这个首部中列出的相匹配的时候，服务器端才会返回所请求的资源，响应状态码为200。如果没有资源的 ETag 值相匹配，那么返回304状态码。但是不管如何，都至少返回 Cache-Control、Content-Location、Date、ETag、Expires 和 Vary 中之一的字段。")]),this._v(" "),e("li",[this._v("POST、PUT 等请求改变文件的请求，如果没有资源的 ETag 值相匹配，那么返回412状态码。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"if-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-match","aria-hidden":"true"}},[this._v("#")]),this._v(" If-Match")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("用途：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("For GET 和 HEAD 方法，搭配 Range 头字段使用，可以用来保证新请求的范围与之前请求的范围是对同一份资源的请求。如果 ETag 无法匹配，那么需要返回416（范围请求无法满足）响应。")]),this._v(" "),e("li",[this._v("对于 PUT 或者其他不安全的请求，If-Match 首部可以用来避免更新丢失问题。它可以用来检测用户想要上传的不会覆盖获取原始资源之后做出的更新。如果请求的条件不满足，那么需要返回412（预处理错误）响应。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("关于强校验和弱校验：")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",[t._v("ETag1")]),t._v(" "),a("th",[t._v("ETag2")]),t._v(" "),a("th",[t._v("Strong Comparison")]),t._v(" "),a("th",[t._v("Weak Comparison")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v('W/"1"')]),t._v(" "),a("td",[t._v('W/"1"')]),t._v(" "),a("td",[t._v("no match")]),t._v(" "),a("td",[t._v("match")])]),t._v(" "),a("tr",[a("td",[t._v('W/"1"')]),t._v(" "),a("td",[t._v('W/"2"')]),t._v(" "),a("td",[t._v("no match")]),t._v(" "),a("td",[t._v("no match")])]),t._v(" "),a("tr",[a("td",[t._v('W/"1"')]),t._v(" "),a("td",[t._v('"1"')]),t._v(" "),a("td",[t._v("no match")]),t._v(" "),a("td",[t._v("match")])]),t._v(" "),a("tr",[a("td",[t._v('"1"')]),t._v(" "),a("td",[t._v('"1"')]),t._v(" "),a("td",[t._v("match")]),t._v(" "),a("td",[t._v("match")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("ETag 主要为了解决 Last-Modified 无法解决的一些问题。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("一些文件也许会周期性的更改，但是他的内容并不改变（仅仅改变的修改时间），这个时候我们并不希望客户端认为这个文件被修改了；")]),this._v(" "),e("li",[this._v("某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说 1 秒内修改了 N 次)，Last-Modified 能检查到的粒度是秒级的，这种修改无法判断（或者说 UNIX 记录 MTIME 只能精确到秒）；")]),this._v(" "),e("li",[this._v("某些服务器不能精确的得到文件的最后修改时间。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"启发式缓存阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启发式缓存阶段","aria-hidden":"true"}},[this._v("#")]),this._v(" 启发式缓存阶段")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Age:")]),t._v(" 23146\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Cache-Control:")]),t._v(" public\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Date:")]),t._v(" Tue, 28 Nov 2017 12:26:41 GMT\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Last-Modified:")]),t._v(" Tue, 28 Nov 2017 05:14:02 GMT\n"),a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Vary:")]),t._v(" Accept-Encoding\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果 Expires、"),e("code",[this._v("Cache-Control: max-age")]),this._v(" 或 "),e("code",[this._v("Cache-Control:s-maxage")]),this._v(" 都没有在响应头中出现，并且也没有其他缓存设置，那么浏览器默认会采用一个"),e("strong",[this._v("启发式算法")]),this._v("，会根据响应头中2个时间字段 Date 和 Last-Modified 之间的时间差值，取其值的10%作为缓存时间的周期。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这就是"),e("strong",[this._v("启发式缓存阶段")]),this._v("。这个阶段很容让人忽视，但实际上每时每刻都在发挥着作用。所以在今后的开发过程中如果遇到那种"),e("strong",[this._v("默认缓存")]),this._v("的坑，不要叫嚣，不要生气，浏览器只是在遵循启发式缓存协议而已。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"其他缓存字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他缓存字段","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他缓存字段")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"pragma"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pragma","aria-hidden":"true"}},[this._v("#")]),this._v(" Pragma")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Pragma 是 HTTP/1.1 之前版本遗留的通用首部字段，仅作为于 HTTP/1.0 的向后兼容而使用。虽然它是一个通用首部，但是它在响应报文中时的行为没有规范，依赖于浏览器的实现。RFC 中该字段只有 "),e("code",[this._v("no-cache")]),this._v(" 一个可选值，会通知浏览器不直接使用缓存，要求向服务器发请求校验新鲜度。"),e("strong",[this._v("因为它优先级最高，当存在时一定不会命中强缓存。")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("Pragma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("no-cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("仅有 IE 才能识别这段 "),e("code",[this._v("<meta>")]),this._v(" 标签含义，其它主流浏览器仅能识别 "),e("code",[this._v("Cache-Control: no-store")]),this._v(" 的 "),e("code",[this._v("<meta>")]),this._v("标签")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("服务端响应添加 "),e("code",[this._v("Progma: no-cache")]),this._v("，浏览器表现行为和强制刷新类似。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"date"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#date","aria-hidden":"true"}},[this._v("#")]),this._v(" Date")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("该字段也用于 "),e("a",{attrs:{href:"#%E5%90%AF%E5%8F%91%E5%BC%8F%E7%BC%93%E5%AD%98%E9%98%B6%E6%AE%B5"}},[this._v("启发式缓存阶段")]),this._v(" 的计算。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"age"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#age","aria-hidden":"true"}},[this._v("#")]),this._v(" Age")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Age 首部字段表示资源在缓存代理服务器中已缓存的时长，单位为秒（取决于 "),e("code",[this._v("max-age")]),this._v(" 和 "),e("code",[this._v("s-maxgae")]),this._v(" 的大小）。若出现此字段，表示已命中代理服务器的缓存。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("Age:")]),this._v(" 2383321\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("Date:")]),this._v(" Wed, 08 Mar 2017 16:12:42 GMT\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以上 HTTP 报文表示代理服务器在 "),e("code",[this._v("2017年3月8日16:12:42")]),this._v(" 时向源服务器发起了对该资源的请求，目前缓存代理服务器已缓存该资源2383321秒。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vary","aria-hidden":"true"}},[this._v("#")]),this._v(" Vary")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("服务器通过指定 "),e("code",[this._v("Vary: Accept-Encoding")]),this._v("，告知代理服务器，对于这个资源，需要缓存两个版本：压缩和未压缩。这样老式浏览器和新的浏览器，通过代理，就分别拿到了未压缩和压缩版本的资源，避免了都拿同一个资源的尴尬。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("Vary:")]),this._v(" Accept-Encoding, User-Agent\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"最佳优化策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最佳优化策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 最佳优化策略")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("但是给文件设置一个很长的 Cacha-Control 也会带来其他的问题，最主要的问题是静态内容更新时，用户不能及时获得更新的内容。这时候就要"),e("strong",[this._v("使用 Hash 的方法对文件进行命名")]),this._v("，通过每次更新不同的静态文件名来消除强缓存的影响。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"缓存资源类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存资源类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 缓存资源类型")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[t._v("CSS 样式文件")]),t._v(" "),a("li",[t._v("JS 文件")]),t._v(" "),a("li",[t._v("Logo、图标")]),t._v(" "),a("li",[t._v("HTML 文件")]),t._v(" "),a("li",[t._v("可以下载的内容")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("业务敏感的 GET 请求")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"用户行为分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户行为分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 用户行为分析")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",[t._v("用户操作")]),t._v(" "),a("th",[t._v("Expires/Cache-Control")]),t._v(" "),a("th",[t._v("Last-Modified/Etag")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("地址栏回车")]),t._v(" "),a("td",[t._v("有效")]),t._v(" "),a("td",[t._v("有效")])]),t._v(" "),a("tr",[a("td",[t._v("页面链接跳转")]),t._v(" "),a("td",[t._v("有效")]),t._v(" "),a("td",[t._v("有效")])]),t._v(" "),a("tr",[a("td",[t._v("新开窗口")]),t._v(" "),a("td",[t._v("有效")]),t._v(" "),a("td",[t._v("有效")])]),t._v(" "),a("tr",[a("td",[t._v("前进、后退")]),t._v(" "),a("td",[t._v("有效")]),t._v(" "),a("td",[t._v("有效")])]),t._v(" "),a("tr",[a("td",[t._v("F5刷新")]),t._v(" "),a("td",[t._v("无效")]),t._v(" "),a("td",[t._v("有效")])]),t._v(" "),a("tr",[a("td",[t._v("Ctrl+F5刷新")]),t._v(" "),a("td",[t._v("无效")]),t._v(" "),a("td",[t._v("无效")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"阻止浏览器缓存静态资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阻止浏览器缓存静态资源","aria-hidden":"true"}},[this._v("#")]),this._v(" 阻止浏览器缓存静态资源")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("实际上，工作中很多场景都需要避免浏览器缓存，除了浏览器隐私模式，请求时想要禁用缓存，还可以设置请求头："),e("code",[this._v("Cache-Control: no-cache, no-store, must-revalidate")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[this._v('<link rel="stylesheet" type="text/css" href="../css/style.css?version=1.8.9"\n')])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Cache-Control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-cache, no-store, must-revalidate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"http缓存总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http缓存总结","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP缓存总结")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:a(175),alt:"浏览器缓存机制示意图"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("HTTP缓存常用字段")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("缓存类型")]),t._v(" "),a("th",[t._v("HTTP/1.0")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("HTTP/1.1")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("强缓存")]),t._v(" "),a("td",[t._v("Expires")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Cache-Control")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("协商缓存")]),t._v(" "),a("td",[t._v("响应头：Last-Modified"),a("br"),t._v("请求头：If-Modified-Since")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("响应头：ETag"),a("br"),t._v("请求头：If-None-Match")])])])])}],r=a(0),_=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("浏览器首次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，简单的过程如下图：")]),t._v(" "),t._m(5),t._v(" "),a("p",[t._v("由上图我们可以知道：")]),t._v(" "),t._m(6),t._v(" "),a("p",[t._v("以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题都迎刃而解了，本文也将围绕着这点进行详细分析。")]),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("强缓存如果命中缓存则不需要和服务器端发生交互，而协商缓存不管是否命中都要和服务器端发生交互。强缓存的优先级高于协商缓存。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("强缓存的情况主要有三种（暂不分析协商缓存过程）。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),a("p",[t._v("当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTPP 响应报文的响应头（HTTP Header）中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 Expires 和 Cache-Control，其中 Cache-Control 优先级比 Expires 高。")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),a("p",[t._v("在浏览器中，浏览器会在 JavaScript 脚本和图片等文件解析后直接存入内存缓存中，那么刷新页面时只需直接从内存缓存中读取（from memory cache）；而 CSS 文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存（from disk cache）。")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),a("p",[t._v("Expires 字段用于告知客户端缓存资源过期失效的绝对时间，该字段值为 GMT 格式的时间字符串。")]),t._v(" "),t._m(32),t._m(33),t._v(" "),a("p",[t._v("同样可以在 HTML 文件里直接使用：")]),t._v(" "),t._m(34),a("p",[t._v("如果设置的时间是过去的时间，则刷新页面会重新发送请求。")]),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),a("p",[t._v("通过 Cache-Control 首部字段的指令可以控制告诉客户端或是服务器如何处理缓存。")]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),a("p",[t._v("上面指令的意思是缓存的有效时间为100秒，之后访问需要向服务器发送请求验证，此缓存可被代理服务器和客户端缓存。")]),t._v(" "),a("p",[t._v("一般来说，为了兼容，两个版本的强制缓存都会被实现。")]),t._v(" "),t._m(42),t._v(" "),a("p",[t._v("由上面的例子我们可以知道：")]),t._v(" "),t._m(43),t._v(" "),a("p",[t._v("由于 Cache-Control 的优先级比 Expires 高，那么直接根据 Cache-Control 的值进行缓存，意思就是说在600秒内再次发起该请求，则会直接使用缓存结果，强制缓存生效。")]),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),a("p",[t._v("而协商缓存与强制缓存的不同之处在于，协商缓存每次读取数据时都需要跟服务器通信，并且会增加缓存标识。")]),t._v(" "),t._m(47),t._v(" "),a("br"),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),a("p",[t._v("在 HTTP 协议的 1.0 和 1.1 版本中也有不同的实现方式。")]),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),a("p",[t._v("当浏览器访问资源时，服务器会根据资源计算出一个哈希值，并随 ETag 响应头返回，当浏览器再次需要访问资源时，携带 If-None-Match 请求头，服务器再次计算该资源的 ETag 值。")]),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),a("p",[t._v("协商缓存首部字段包括：")]),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),a("p",[t._v("Last-Modified 首部字段用于表示请求资源的最后一次修改时间，该字段值为 GMT 格式的时间字符串。该字段不光用于协商缓存，在启发式缓存阶段同样起到至关重要的作用。")]),t._v(" "),t._m(62),t._v(" "),t._m(63),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),a("p",[t._v("当浏览器再次请求这个 URL 的时候，根据 HTTP 协议规定，浏览器会把上次请求返回的 Last-Modified 值存储在 If-Modified-Since 里面发送给服务端，告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求后，发现请求头含有 If-Modified-Since 字段，则会根据 If-Modified-Since 的字段值与该资源在服务器的最后被修改时间来判断两次访问期间资源是否有被修改，从而决定是否返回完整的资源。")]),t._v(" "),t._m(67),t._v(" "),t._m(68),t._m(69),t._v(" "),a("p",[t._v("这个字段字面意思和 If-Modified-Since 相反，但处理方式并不是相反的。如果文件在两次访问期间没有被修改则返回200和网页资源，如果文件修改了则返回状态码412（预处理错误）。")]),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._v(" "),a("p",[t._v("If-None-Match 是客户端再次发起该请求时，携带上次请求返回的唯一标识 ETag 值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值，以判断缓存资源是否有效。")]),t._v(" "),t._m(77),t._m(78),t._v(" "),a("p",[t._v("⚠️ 注意：ETag / If-None-Match 优先级高于 Last-Modified / If-Modified-Since，同时存在则只有 ETag / If-None-Match 生效。")]),t._v(" "),t._m(79),t._v(" "),a("p",[t._v("表示条件请求，携带上一次请求中资源的 ETag，服务器根据这个字段判断文件是否有新的修改")]),t._v(" "),a("p",[t._v("在请求方法为 GET 和 HEAD 的情况下，服务器仅在请求的资源满足此首部列出的 ETag 之一时才会返回资源。而对于 PUT 或其它非安全方法来说，只有满足条件的情况下才可以将资源上传。")]),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),a("p",[t._v("当然和 Last-Modified 相比，ETag 也有自己的缺点，比如由于需要对资源进行生成标识，性能方面就势必有所牺牲。")]),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),a("p",[t._v("总的来说，ETag 是 Last-Modifed 的补充，比 Last-Modified 更加严谨。但设定了 Etag 之后，每次客户端发出请求，服务端都会根据资源重新生成一个 ETag，相对来说，对性能会有影响。")]),t._v(" "),t._m(86),t._v(" "),t._m(87),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),t._m(92),t._v(" "),a("p",[t._v("Pragma 属于通用首部字段，在客户端上使用时，常规要求我们往 HTML 上加上上面这段 meta 元标签。")]),t._v(" "),t._m(93),a("p",[t._v("事实上这种禁用缓存的形式用处很有限：")]),t._v(" "),a("ul",[t._m(94),t._v(" "),a("li",[a("p",[t._v("在 IE 中识别到该 "),a("code",[t._v("<meta>")]),t._v(" 标签含义，并不一定会在请求字段加上 Pragma，但的确会让当前页面每次都发新请求（仅限页面，页面上的资源则不受影响）。——"),a("a",{attrs:{href:"https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2Fvajoy%2Fp%2F5341664.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈浏览器HTTP的缓存机制"),a("OutboundLink")],1)])])]),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),a("p",[t._v("Date 首部字段表示响应报文生成的日期时间，请求经过代理服务器时，返回的 Date 未必是最新的，通常这个时候，代理服务器将增加一个 Age 字段告知该资源已缓存了多久。")]),t._v(" "),t._m(97),t._v(" "),t._m(98),t._v(" "),t._m(99),t._v(" "),t._m(100),t._m(101),t._v(" "),t._m(102),t._v(" "),a("p",[t._v("Vary 首部字段用于表示代理服务器缓存的管理信息。")]),t._v(" "),a("p",[t._v("对于服务器而言，资源文件可能不止一个版本，比如说压缩和未压缩，针对不同的客户端，通常需要返回不同的资源版本。比如说老式的浏览器可能不支持解压缩，这个时候，就需要返回一个未压缩的版本；对于新的浏览器，支持压缩，返回一个压缩的版本，有利于节省带宽，提升体验。那么怎么区分这个版本呢，这个时候就需要 Vary了。")]),t._v(" "),t._m(103),t._v(" "),t._m(104),a("p",[t._v("如上设置，代理服务器将针对是否压缩和浏览器类型两个维度去缓存资源。如此一来，同一个 URL，就能针对 PC 和 Mobile 返回不同的缓存内容。")]),t._v(" "),t._m(105),t._v(" "),a("p",[t._v("因为协商缓存本身也有 HTTP 请求的损耗，所以最佳优化策略是要尽可能的将静态文件存储为较长的时间，多利用强缓存而不是协商缓存，即消灭304。")]),t._v(" "),t._m(106),t._v(" "),t._m(107),t._v(" "),a("p",[t._v("回到实际应用上来，首先要明确哪些内容适合被缓存哪些不适合。")]),t._v(" "),a("p",[t._v("考虑缓存的内容：")]),t._v(" "),t._m(108),t._v(" "),a("p",[t._v("一些不应该被缓存的内容：")]),t._v(" "),t._m(109),t._v(" "),t._m(110),t._v(" "),t._m(111),t._v(" "),a("p",[t._v("协商缓存每次请求都会与服务器交互，第一次是拿数据和标识的过程，第二次开始，就是浏览器询问服务器资源是否有更新的过程。每次请求都会传输数据，如果命中缓存，则资源的 Status 状态码为 304 而不是 200 。同样的，一般来讲为了兼容，两个版本的协商缓存都会被实现，HTTP/1.1 版本的实现优先级会高于 HTTP/1.0 版本的实现。")]),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),a("p",[t._v("当然，还有一种常用做法：即给请求的资源增加一个版本号。")]),t._v(" "),t._m(114),a("p",[t._v("这样做的好处就是你可以自由控制什么时候加载最新的资源。")]),t._v(" "),a("p",[t._v("不仅如此，HTML也可以禁用缓存，即在页面的节点中加入标签。")]),t._v(" "),t._m(115),a("p",[t._v("上述虽能禁用缓存，但只有部分浏览器支持，而且由于代理不解析 HTML 文档，故代理服务器也不支持这种方式。")]),t._v(" "),t._m(116),t._v(" "),a("p",[t._v("强制缓存优先于协商缓存进行，若强制缓存（Expires 和 Cache-Control）生效则直接使用缓存，若不生效则进行协商缓存（Last-Modified / If-Modified-Since 和 Etag / If-None-Match），协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存，主要过程如下：")]),t._v(" "),t._m(117),t._v(" "),t._m(118),t._v(" "),t._m(119),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("参考资料：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5a6c87c46fb9a01ca560b4d7",target:"_blank",rel:"noopener noreferrer"}},[t._v("掘金：缓存详解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://web.jobbole.com/91084/",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器缓存机制剖析"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/duiniweixiao/p/8884274.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底理解浏览器的缓存机制"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000016199807",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 10分钟彻底搞懂Http的强制缓存和协商缓存"),a("OutboundLink")],1)])])])},s,!1,null,null,null);e.default=_.exports}}]);