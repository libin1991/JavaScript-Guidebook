(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{212:function(t,s,e){t.exports=e.p+"assets/img/1a9b7259-6eb6-4d56-b260-18d509f75f2a.465bc347.jpg"},213:function(t,s,e){t.exports=e.p+"assets/img/eff477c6-487e-4da2-b238-f0b2c73e5be9.77be1f9b.jpg"},214:function(t,s,e){t.exports=e.p+"assets/img/0e1fd177-3d5f-45fc-a56d-528f2ce14bd1.81f5617d.jpg"},215:function(t,s,e){t.exports=e.p+"assets/img/41e56a4a-4e04-4286-aa37-db3c242ae8bb.92809ed8.jpg"},216:function(t,s,e){t.exports=e.p+"assets/img/c01ca805-6aca-48d6-9379-ce85a119330d.6105f4c1.jpg"},513:function(t,s,e){"use strict";e.r(s);var a=[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存模型","aria-hidden":"true"}},[this._v("#")]),this._v(" 内存模型")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("JavaScript 内存空间分为"),e("strong",[t._v("栈")]),t._v("（Stack）、"),e("strong",[t._v("堆")]),t._v("（Heap）、"),e("strong",[t._v("池")]),t._v("（一般也会归类为栈中）。其中"),e("strong",[t._v("栈")]),t._v("存放变量，"),e("strong",[t._v("堆")]),t._v("存放复杂对象，"),e("strong",[t._v("池")]),t._v("存放常量。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"栈数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈数据结构","aria-hidden":"true"}},[this._v("#")]),this._v(" 栈数据结构")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:e(212),alt:"乒乓球盒子与栈类比"}})])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("这种乒乓球的存放方式与栈中存取数据的方式如出一辙。处于盒子中最顶层的 "),e("code",[t._v("乒乓球 5")]),t._v("，它一定是最后被放进去，但可以最先被使用。而我们想要使用底层的 "),e("code",[t._v("乒乓球 1")]),t._v("，就必须将上面的 4 个乒乓球取出来，让 "),e("code",[t._v("乒乓球 1")]),t._v("  处于盒子顶层。这就是栈空间 "),e("strong",[t._v("先进后出，后进先出")]),t._v(" 的特点。图中已经详细的表明了栈空间的存储原理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"堆数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆数据结构","aria-hidden":"true"}},[this._v("#")]),this._v(" 堆数据结构")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("书虽然也整齐的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在 JSON 格式的数据中，我们存储的 "),s("code",[this._v("key-value")]),this._v(" 是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 队列")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:e(213),alt:"队列数据结构"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"变量对象与基础数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量对象与基础数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 变量对象与基础数据类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("JavaScript 中的基础数据类型，这些值都有固定的大小，往往都保存在栈内存中（闭包除外），由系统自动分配存储空间。我们可以直接操作保存在栈内存空间的值，因此基础数据类型都是按值访问，数据在栈内存中的存储与使用方式类似于数据结构中的堆栈数据结构，遵循 "),s("strong",[this._v("后进先出")]),this._v(" 的原则。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("暂不考虑 Symbol 类型")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"引用数据类型与堆内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型与堆内存","aria-hidden":"true"}},[this._v("#")]),this._v(" 引用数据类型与堆内存")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("与其他语言不同，JavaScript 的引用数据类型，比如数组 Array，它们值的大小是不固定的。引用数据类型的值是保存在堆内存中的对象。JavaScript 不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。这里的引用，我们可以粗浅地理解为保存在栈内存中的一个"),s("strong",[this._v("引用地址")]),this._v("，该地址与堆内存的实际值相关联。 堆存取数据的方式，则与书架与书非常相似。 书虽然也有序的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在 JSON 格式的数据中，我们存储的 "),s("code",[this._v("key-value")]),this._v(" 是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量对象")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量对象")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bingo!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量对象")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量 b 存在于变量对象中，{m: 20} 作为对象存在于堆内存中")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量 c 存在于变量对象中，[1, 2, 3] 作为对象存在于堆内存中")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:e(214),alt:"上例图解"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因此当我们要访问堆内存中的引用数据类型时，实际上我们首先是从变量对象中获取了该对象的"),s("strong",[this._v("地址引用")]),this._v("（或者地址指针），然后再从堆内存中取得我们需要的数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"数据拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据拷贝","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据拷贝")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本数据类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("🌰 "),s("strong",[this._v("标准示例：")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在变量对象中数据发生拷贝操作时，系统会自动为新的变量分配一个新值。"),s("code",[this._v("const b = a")]),this._v(" 赋值操作执行后，虽然变量 "),s("code",[this._v("a")]),this._v(" 和变量 "),s("code",[this._v("b")]),this._v(" 均为 100，但是它们其实已经是相互独立互不影响的值了。具体变化如下图所示。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:e(215),alt:"基本数据类型拷贝图例"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"引用数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 引用数据类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("🌰 "),s("strong",[this._v("标准示例：")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("引用类型的拷贝同样也会为新的变量自动分配一个新的值保存在变量对象中，但不同的是，这个新的值，仅仅只是引用类型的一个"),s("strong",[this._v("地址指针")]),this._v("。当地址指针相同时，尽管他们相互独立，但是在变量对象中访问到的具体对象实际上是同一个。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:e(216),alt:"引用数据类型拷贝图例"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("table",[e("thead",[e("tr",[e("th",[t._v("栈内存")]),t._v(" "),e("th",[t._v("堆内存")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("存储基础数据类型")]),t._v(" "),e("td",[t._v("存储引用数据类型")])]),t._v(" "),e("tr",[e("td",[t._v("按值访问")]),t._v(" "),e("td",[t._v("按引用访问")])]),t._v(" "),e("tr",[e("td",[t._v("存储的值大小固定")]),t._v(" "),e("td",[t._v("存储的值大小不定，可动态调整")])]),t._v(" "),e("tr",[e("td",[t._v("由系统自动分配内存空间")]),t._v(" "),e("td",[t._v("由开发者通过代码进行分配")])]),t._v(" "),e("tr",[e("td",[t._v("主要用来执行程序")]),t._v(" "),e("td",[t._v("主要用来存放对象")])]),t._v(" "),e("tr",[e("td",[t._v("空间小，运行效率高")]),t._v(" "),e("td",[t._v("空间大，但是运行效率相对较低")])]),t._v(" "),e("tr",[e("td",[t._v("先进后出，后进先出")]),t._v(" "),e("td",[t._v("无序存储，可根据引用直接获取")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("参考资料：")])])}],r=e(0),n=Object(r.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("与 C / C++ 不同，JavaScript 中并没有严格意义上区分栈内存与堆内存。因此我们可以简单粗暴的理解为 JavaScript 的所有数据都保存在堆内存中。但是在某些场景，我们仍然需要基于堆栈数据结构的思维来实现一些功能，比如 JavaScript 的 "),e("router-link",{attrs:{to:"./../execution/execution-context-stack.html"}},[t._v("执行上下文")]),t._v("。执行上下文的执行顺序借用了栈数据结构的存取方式。")],1),t._v(" "),e("p",[t._v("要简单理解栈的存取方式，我们可以通过类比乒乓球盒子来分析。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),e("p",[t._v("堆数据结构是一种树状结构。它的存取数据的方式，则与书架与书非常相似。")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),e("p",[t._v("队列是一种先进先出（FIFO）的数据结构。正如排队过安检一样，排在队伍前面的人一定是最先过检的人。用以下的图示可以清楚的理解队列的原理。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),e("p",[t._v("JavaScript 的 "),e("router-link",{attrs:{to:"./../execution/execution-context-stack.html"}},[t._v("执行上下文")]),t._v(" 生成之后，会创建一个叫做 "),e("router-link",{attrs:{to:"./../execution/variable-object.html"}},[t._v("变量对象")]),t._v(" 的特殊对象，JavaScript 的基础数据类型往往都会保存在变量对象中。")],1),t._v(" "),e("p",[t._v("严格意义上来说，变量对象也是存放于堆内存中，但是由于变量对象的特殊职能，我们在理解时仍然需要将其于堆内存区分开来。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),e("p",[t._v("为了更好的搞懂变量对象与堆内存，我们可以结合以下例子与图解进行理解。")]),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),e("p",[t._v("理解了 JavaScript 的内存空间，我们就可以借助内存空间的特性来验证一下数据类型的特点了。")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),e("hr"),t._v(" "),t._m(30),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000006104910",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 内存基本知识"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.jianshu.com/p/996671d4dcc4",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 内存空间详细图解"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 JavaScript's Memory Model"),e("OutboundLink")],1)])])])},a,!1,null,null,null);s.default=n.exports}}]);