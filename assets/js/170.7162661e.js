(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{520:function(s,t,a){"use strict";a.r(t);var r=a(0),e=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import","aria-hidden":"true"}},[s._v("#")]),s._v(" import")]),s._v(" "),a("p",[a("code",[s._v("import")]),s._v(" 命令用于输入其他模块提供的功能。")]),s._v(" "),a("p",[s._v("ECMAScript 规范中的模块化方案提供了四种引入模块的方式：")]),s._v(" "),a("ul",[a("li",[s._v("命名导入（Named Imports）")]),s._v(" "),a("li",[s._v("命名空间导入（Namespace Import）")]),s._v(" "),a("li",[s._v("默认导入（Default Import）")]),s._v(" "),a("li",[s._v("空的导入（Empty Import）")])]),s._v(" "),a("h3",{attrs:{id:"导入方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导入方式","aria-hidden":"true"}},[s._v("#")]),s._v(" 导入方式")]),s._v(" "),a("h4",{attrs:{id:"命名导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名导入","aria-hidden":"true"}},[s._v("#")]),s._v(" 命名导入")]),s._v(" "),a("p",[s._v("从源模块导入其原始名称的特定项目。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" something "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./module.js'")]),s._v("\n")])])]),a("p",[s._v("从源模块导入特定项，并在导入时指定自定义名称。使用关键字 "),a("code",[s._v("as")]),s._v("，将输入的变量重命名。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" somthing "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" sth "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./module.js'")]),s._v("\n")])])]),a("h4",{attrs:{id:"命名空间导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间导入","aria-hidden":"true"}},[s._v("#")]),s._v(" 命名空间导入")]),s._v(" "),a("p",[s._v("将源模块中的所有内容作为对象导入，将所有源模块的命名导出公开为属性和方法。默认导出被排除在此对象之外。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" module "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./module.js'")]),s._v("\n")])])]),a("p",[s._v("上述例子中 "),a("code",[s._v("something")]),s._v(" 将被附加到作为属性的导入对象上，即 "),a("code",[s._v("module.something")]),s._v("。")]),s._v(" "),a("h4",{attrs:{id:"默认导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认导入","aria-hidden":"true"}},[s._v("#")]),s._v(" 默认导入")]),s._v(" "),a("p",[s._v("导入源文件的默认导出。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" something "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./module.js'")]),s._v("\n")])])]),a("h4",{attrs:{id:"空的导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空的导入","aria-hidden":"true"}},[s._v("#")]),s._v(" 空的导入")]),s._v(" "),a("p",[s._v("加载模块代码，但不要创建任何新对象。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./module.js'")]),s._v("\n")])])]),a("h3",{attrs:{id:"特性规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性规范","aria-hidden":"true"}},[s._v("#")]),s._v(" 特性规范")]),s._v(" "),a("h4",{attrs:{id:"只读性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#只读性","aria-hidden":"true"}},[s._v("#")]),s._v(" 只读性")]),s._v(" "),a("p",[a("code",[s._v("import")]),s._v(" 命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./profile.js'")]),s._v("\n\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  Syntax Error : 'a' is read-only;")]),s._v("\n")])])]),a("p",[s._v("但是，如果输入变量是对象类型，改写该变量是被允许的。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./profile.js'")]),s._v("\n\nbar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Right")]),s._v("\n")])])]),a("p",[s._v("尽管此处修改的对象属性，在其他模块也可以读取改写后的值。不过，这种做法很难查错，因此建议凡是输入的变量，都当作只读变量，轻易不要修改它。")]),s._v(" "),a("h4",{attrs:{id:"输入路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入路径","aria-hidden":"true"}},[s._v("#")]),s._v(" 输入路径")]),s._v(" "),a("p",[a("code",[s._v("import")]),s._v(" 后面的 "),a("code",[s._v("from")]),s._v(" 指定模块文件的位置，可以是相对路径，也可以是绝对路径，"),a("code",[s._v(".js")]),s._v(" 后缀可以省略。")]),s._v(" "),a("p",[s._v("如果只是模块名，不带有路径，那么必须有"),a("strong",[s._v("配置文件")]),s._v("（通常从引入模块目录下 "),a("code",[s._v("package.json")]),s._v(" 中查找），告诉 JavaScript 引擎该模块的位置。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" React "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'react'")]),s._v("\n")])])]),a("h4",{attrs:{id:"模块提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块提升","aria-hidden":"true"}},[s._v("#")]),s._v(" 模块提升")]),s._v(" "),a("p",[s._v("注意，"),a("code",[s._v("import")]),s._v(" 命令具有提升效果，"),a("code",[s._v("import")]),s._v(" 命令无论写在文件中的哪一行，都会提升到整个模块的头部，首先执行。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./profile.js'")]),s._v("\n")])])]),a("p",[s._v("上面的代码不会报错，因为 "),a("code",[s._v("import")]),s._v(" 的执行早于 "),a("code",[s._v("foo")]),s._v(" 的调用。这种行为的本质是，"),a("code",[s._v("import")]),s._v(" 命令是编译阶段执行的，在代码运行之前。")]),s._v(" "),a("h4",{attrs:{id:"静态执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态执行","aria-hidden":"true"}},[s._v("#")]),s._v(" 静态执行")]),s._v(" "),a("p",[s._v("由于 "),a("code",[s._v("import")]),s._v(" 是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'f'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'oo'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'my_module'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" module "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'my_module'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'module1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'module2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("上面三种写法都会报错，因为它们用到了表达式、变量和 "),a("code",[s._v("if")]),s._v(" 结构。在静态分析阶段，这些语法都是没法得到值的。")]),s._v(" "),a("h4",{attrs:{id:"重复加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复加载","aria-hidden":"true"}},[s._v("#")]),s._v(" 重复加载")]),s._v(" "),a("p",[s._v("如果多次重复执行同一句 "),a("code",[s._v("import")]),s._v(" 语句，那么"),a("strong",[s._v("只会执行一次，而不会执行多次")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lodash'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lodash'")]),s._v("\n")])])]),a("p",[s._v("上面代码加载了两次 "),a("code",[s._v("lodash")]),s._v("，但是只会执行一次。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'my_module'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'my_module'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等同于")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bar "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'my_module'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("上面代码中，虽然 "),a("code",[s._v("foo")]),s._v(" 和 "),a("code",[s._v("bar")]),s._v(" 在两个语句中加载，但是它们对应的是同一个 "),a("code",[s._v("my_module")]),s._v(" 实例。也就是说，"),a("code",[s._v("import")]),s._v(" 语句是 Singleton 模式。")]),s._v(" "),a("h4",{attrs:{id:"模块化隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化隔离","aria-hidden":"true"}},[s._v("#")]),s._v(" 模块化隔离")]),s._v(" "),a("p",[s._v("目前阶段，通过 Babel 转码，CommonJS 模块的 "),a("code",[s._v("require")]),s._v(" 命令和 ES6 模块的 "),a("code",[s._v("import")]),s._v(" 命令，可以写在同一个模块里面，但是最好不要这样做。因为 "),a("code",[s._v("import")]),s._v(" 在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'core-js/modules/es6.symbol'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'core-js/modules/es6.promise'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" React "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'React'")]),s._v("\n")])])])])}],!1,null,null,null);t.default=e.exports}}]);