(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{232:function(t,e,s){t.exports=s.p+"assets/img/62071824-1fa4-44cb-b616-833657618367.096a46e2.png"},575:function(t,e,s){"use strict";s.r(e);var a=[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"server-sent-events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#server-sent-events","aria-hidden":"true"}},[this._v("#")]),this._v(" Server-sent Events")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(232),alt:"Server-sent Events"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"本质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本质","aria-hidden":"true"}},[this._v("#")]),this._v(" 本质")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特点","aria-hidden":"true"}},[this._v("#")]),this._v(" 特点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("总体来说，WebSocket 更强大和灵活。因为它是全双工通道，可以双向通信；SSE 是"),e("strong",[this._v("单向通道")]),this._v("，只能服务器向浏览器发送，因为流信息本质上就是下载。如果浏览器向服务器发送信息，就变成了另一次 HTTP 请求。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("SSE 优点：")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("SSE 基于 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。")]),t._v(" "),s("li",[t._v("SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。")]),t._v(" "),s("li",[t._v("SSE 默认支持断线重连，WebSocket，需要自己实现。")]),t._v(" "),s("li",[t._v("SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket，默认支持传送二进制数据。")]),t._v(" "),s("li",[t._v("SSE 支持自定义发送的消息类型。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("SSE 和 WebSocket 对比")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("是否基于新协议")]),t._v(" "),s("th",[t._v("是否双向通信")]),t._v(" "),s("th",[t._v("是否支持跨域")]),t._v(" "),s("th",[t._v("接入成本")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("SSE")]),t._v(" "),s("td",[t._v("否（"),s("code",[t._v("HTTP")]),t._v("）")]),t._v(" "),s("td",[t._v("否（服务器单向）")]),t._v(" "),s("td",[t._v("否（Firefox支持）")]),t._v(" "),s("td",[t._v("低")])]),t._v(" "),s("tr",[s("td",[t._v("WebSocket")]),t._v(" "),s("td",[t._v("是（"),s("code",[t._v("WS")]),t._v("）")]),t._v(" "),s("td",[t._v("是")]),t._v(" "),s("td",[t._v("是")]),t._v(" "),s("td",[t._v("高")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"客户端实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 客户端实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("EventSource 接口用于接收服务器发送的事件。它通过 HTTP 连接到一个服务器，以 "),e("code",[this._v("text/event-stream")]),this._v(" 格式接收事件，不关闭连接。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("浏览器生成 EventSource 实例，向服务器发起连接。")]),t._v(" "),s("li",[t._v("建立 EventSource 实例时，构造函数接收当前网址网域作为第一参数，也可以跨域。跨域时，可以指定第二个参数，打开 "),s("code",[t._v("withCredentials")]),t._v(" 属性，表示是否一起发送 Cookie。")]),t._v(" "),s("li",[t._v("EventSource 实例的 "),s("code",[t._v("readyState")]),t._v(" 属性，表明连接的当前状态。该属性只读，只可以取以下值。\n"),s("ul",[s("li",[s("code",[t._v("0")]),t._v("：相当于常量 "),s("code",[t._v("EventSource.CONNECTING")]),t._v("，表示连接还未建立，或者断线正在重连。")]),t._v(" "),s("li",[s("code",[t._v("1")]),t._v("：相当于常量 "),s("code",[t._v("EventSource.OPEN")]),t._v("，表示连接已经建立，可以接受数据。")]),t._v(" "),s("li",[s("code",[t._v("2")]),t._v("：相当于常量 "),s("code",[t._v("EventSource.CLOSED")]),t._v("，表示连接已断，且不会重连。")])])]),t._v(" "),s("li",[t._v("连接一旦建立，就会触发 "),s("code",[t._v("open")]),t._v(" 事件，可以在 "),s("code",[t._v("onopen")]),t._v(" 属性定义回调函数。（连接事件源）")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EventSource'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" withCredentials"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...   ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("客户端收到服务器发来的数据，就会触发 "),e("code",[this._v("message")]),this._v(" 事件，可以在 "),e("code",[this._v("onmessage")]),this._v(" 属性的回调函数。（接收事件）")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evnet")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handle message")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("上述代码中，事件对象 "),s("code",[t._v("data")]),t._v(" 属性就是服务器端传回的数据（文本格式）。")]),t._v(" "),s("li",[t._v("如果发生通信错误（比如连接中断），就会触发 "),s("code",[t._v("error")]),t._v(" 事件，可以在 "),s("code",[t._v("onerror")]),t._v(" 属性定义回调函数。（错误处理）")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handle error event")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("close()")]),this._v(" 方法用于关闭 SSE 连接。（主动断开连接）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[this._v("source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("close")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("自定义事件")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("默认情况下，服务器发来的数据，总是触发浏览器 "),e("code",[this._v("EventSource")]),this._v(" 实例的 "),e("code",[this._v("message")]),this._v(" 事件。开发者还可以自定义 SSE 事件，这种情况下，发送回来的数据不会触发 "),e("code",[this._v("message")]),this._v(" 事件。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handle message")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面代码中，浏览器对 SSE 的"),e("code",[this._v("foo")]),this._v("事件进行监听。如何实现服务器发送 "),e("code",[this._v("foo")]),this._v(" 事件，请看下文。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"服务器实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 服务器实现")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"数据格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据格式","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据格式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("服务器高速客户端，返回的类型是事件流 "),e("code",[this._v("text/event-stream")]),this._v("。事件流仅仅是一个简单的文本数据流，文本应该使用 UTF-8 格式的编码。每条消息后面都由一个空行作为分隔符。以冒号开头的行为注释行，会被忽略。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("Content-Type:")]),this._v(" text/event-stream\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("Cache-Control:")]),this._v(" no-cache\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("Connection:")]),this._v(" keep-alive\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("SSE 的 MIME Type 规定为 "),e("code",[this._v("text/event-stream")])]),this._v(" "),e("li",[this._v("SSE 肯定不允许缓存")]),this._v(" "),e("li",[this._v("SSE 是一个一直打开的 TCP 连接，所以 Connection 为 Keep-alive")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("每次发送的消息，由若干个 "),s("code",[t._v("message")]),t._v(" 组成，每个 "),s("code",[t._v("message")]),t._v(" 之间用 "),s("code",[t._v("\\n\\n")]),t._v(" 分隔。每个 "),s("code",[t._v("message")]),t._v(" 内部由若干行组成，每一行都是如下格式。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[this._v("[field]: value\\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("filed")]),this._v(" 可能的类型包括：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("空：表示该行是注释，会在处理时被忽略。")]),t._v(" "),s("li",[t._v("data：表示该行包含的是数据。以 data 开头的行可以出现多次。所有这些行都是该事件的数据。")]),t._v(" "),s("li",[t._v("event：表示该行用来声明事件的类型。浏览器在收到数据时，会产生对应类型的事件。")]),t._v(" "),s("li",[t._v("id：表示该行用来声明事件的标识符。")]),t._v(" "),s("li",[t._v("retry：表示该行用来声明浏览器在连接断开之后进行再次连接之前的等待时间。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[this._v(": This is a comment\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"data-字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-字段","aria-hidden":"true"}},[this._v("#")]),this._v(" data 字段")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("数据内容由 "),e("code",[this._v("data")]),this._v(" 字段表示。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("data:")]),this._v(" message\\n\\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果数据很长，可以分成多行，最后一行以 "),e("code",[this._v("\\n\\n")]),this._v(" 结尾，前面行都用 "),e("code",[this._v("\\n")]),this._v(" 结尾。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("data:")]),this._v(" begin message\\n\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("data:")]),this._v(" continue message\\n\\n\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(" {\\n\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(' "foo": "bar",\\n\n'),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(" \"baz\": '123',\\n\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(" }\\n\\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"id-字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#id-字段","aria-hidden":"true"}},[this._v("#")]),this._v(" id 字段")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("数据标识符用 "),e("code",[this._v("id")]),this._v(" 字段表示，相当于每一条数据的编号。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("id:")]),this._v(" msg1\\n\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("data:")]),this._v(" message\\n\\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("浏览器用 "),e("code",[this._v("lastEventId")]),this._v(" 属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的 "),e("code",[this._v("Last-Event-ID")]),this._v(" 头信息，将这个值发送回来，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"event-字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-字段","aria-hidden":"true"}},[this._v("#")]),this._v(" event 字段")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("event")]),this._v(" 字段表示自定义的事件类型，默认是 "),e("code",[this._v("message")]),this._v(" 事件。浏览器可以用 "),e("code",[this._v("addEventListener()")]),this._v(" 监听该事件。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("event:")]),t._v(" foo\\n\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(" a foo event\\n\\n\n\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(" an unnamed event\\n\\n\n\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("event:")]),t._v(" bar\\n\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(" a bar event\\n\\n\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("上面的代码创造了三条信息。第一条的名字是 "),s("code",[t._v("foo")]),t._v("，触发浏览器的 "),s("code",[t._v("foo")]),t._v(" 事件；第二条未取名，表示默认类型，触发浏览器的 "),s("code",[t._v("message")]),t._v(" 事件；第三条是 "),s("code",[t._v("bar")]),t._v("，触发浏览器的 "),s("code",[t._v("bar")]),t._v(" 事件。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("event:")]),t._v(" userconnect\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(' {"username": "bobby", "time": "02:33:48"}\n\n'),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("event:")]),t._v(" usermessage\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(' {"username": "bobby", "time": "02:34:11", "text": "Hi everyone."}\n\n'),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("event:")]),t._v(" userdisconnect\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(' {"username": "bobby", "time": "02:34:23"}\n\n'),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("event:")]),t._v(" usermessage\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("data:")]),t._v(' {"username": "sean", "time": "02:34:36", "text": "Bye, bobby."}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"retry-字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#retry-字段","aria-hidden":"true"}},[this._v("#")]),this._v(" retry 字段")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("服务器可以用 "),e("code",[this._v("retry")]),this._v(" 字段，指定浏览器重新发起连接的时间间隔。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[this._v("retry:")]),this._v(" 10000\\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("参考资料：")])])}],n=s(0),r=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("服务器向浏览器推送消息，除了 WebSocket，还有一种方法：Sever-sent Events（以下简称 SSE）。")]),t._v(" "),s("p",[t._v("W3C 关于 Server-Sent Events 部分的描述 "),s("a",{attrs:{href:"https://www.w3.org/TR/eventsource/",target:"_blank",rel:"noopener noreferrer"}},[t._v("W3C Server-Sent Events"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("相比以往的轮询，SSE 可以为 B2C 带来更高的效率。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("严格来说，HTTP 协议无法让服务器向客户端主动推送消息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息（Streaming）。")]),t._v(" "),s("p",[t._v("也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。")]),t._v(" "),s("p",[t._v("SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。")]),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("SSE 与 WebSocket 作用相似，都是建立浏览器与服务器之间的通信渠道，然后服务器向浏览器推送信息。")]),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("虽然如此，SSE 在设计时就拥有了一些 WebSocket 没有的特性，例如自动重连接、Event IDs 以及发送随机事件的能力等，我们需要根据实际应用场景，去选择不同的应用方案。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),s("p",[t._v("此外，还可以有冒号开头的行，表示注释。通常，服务器每隔一段时间就会向浏览器发送一个注释，保持连接不中断。")]),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),s("p",[t._v("下面是一个发送 JSON 数据的例子。")]),t._v(" "),t._m(38),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._m(46),t._v(" "),s("p",[t._v("下面是另一个例子。")]),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),s("p",[t._v("两种情况会导致浏览器重新发起连接：一种是时间间隔到期，二是由于网络错误等原因，导致连接出错。")]),t._v(" "),s("hr"),t._v(" "),t._m(51),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Server-sent Events 教程"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Server-sent_events/Using_server-sent_events",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN:使用服务器发送事件"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/web/1307_chengfu_serversentevent/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML5 服务器推送事件（Server-sent Events）实战开发"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://blog.5udou.cn/blog/JSShi-Shi-Tong-Xin-San-Ba-Fu-Xi-Lie-Zhi-San-eventsource55",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS实时通信三把斧系列之三：EventSource"),s("OutboundLink")],1)])])])},a,!1,null,null,null);e.default=r.exports}}]);