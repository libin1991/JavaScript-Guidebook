(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{207:function(t,s,n){t.exports=n.p+"assets/img/c531f7ee-008a-407c-b315-29f3092e3165.af180da3.jpg"},501:function(t,s,n){"use strict";n.r(s);var a=[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件循环")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"浏览器环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器环境","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器环境")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("strong",[this._v("宏任务")]),this._v("：main script、setTimeout、setInterval、setImmediate、I/O（Mouse Events、Keyboard Events、Network Events）、UI Rendering（HTML Parsing）")]),this._v(" "),s("li",[s("strong",[this._v("微任务")]),this._v("：Promise.then（非 new Promise）、process.nextTick、MutationObserver")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("宏任务与微任务的优先级")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("宏任务的优先级高于微任务")]),t._v(" "),n("li",[t._v("每个宏任务执行完毕后都必须将当前的微任务队列清空")]),t._v(" "),n("li",[t._v("第一个 "),n("code",[t._v("<script>")]),t._v(" 标签的代码是第一个宏任务")]),t._v(" "),n("li",[n("code",[t._v("process.nextTick")]),t._v(" 优先级高于 "),n("code",[t._v("Promise.then")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:n(207),alt:"事件循环机制中宏任务和微任务图解"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("🌰 "),s("strong",[this._v("标准示例：")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" promise "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 3 6 4 5 2")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"node-环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-环境","aria-hidden":"true"}},[this._v("#")]),this._v(" Node 环境")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("   ┌───────────────────────┐\n┌─"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("│        timers         │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("I")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v(" callbacks     │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     idle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prepare     │\n│  └──────────┬────────────┘      ┌───────────────┐\n│  ┌──────────┴────────────┐      │   incoming"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   │\n│  │         poll          │"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("──connections───     │\n│  └──────────┬────────────┘      │   data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" etc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  │\n│  ┌──────────┴────────────┐      └───────────────┘\n│  │        check          │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n└──┤    close callbacks    │\n   └───────────────────────┘\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("外部输入数据")]),t._v(" "),n("li",[t._v("轮询阶段（Poll）：等待新的 I/O 事件，Node 在一些特殊情况下会阻塞在这里")]),t._v(" "),n("li",[t._v("检查阶段（Check）："),n("code",[t._v("setImmediate")]),t._v(" 的回调会在这个阶段执行")]),t._v(" "),n("li",[t._v("关闭事件回调阶段（Close Callback）")]),t._v(" "),n("li",[t._v("定时器检测阶段（Timer）：这个阶段执行定时器队列中的回调")]),t._v(" "),n("li",[t._v("I/O 事件回调阶段（I/O Callbacks）：这个阶段执行几乎所有的回调，但是不包括 "),n("code",[t._v("close")]),t._v(" 事件、定时器和 "),n("code",[t._v("setImmediate()")]),t._v(" 的回调")]),t._v(" "),n("li",[t._v("闲置阶段（Idle Prepare）：仅在内部使用，不必理会")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺陷","aria-hidden":"true"}},[this._v("#")]),this._v(" 缺陷")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("参考资料：")])])}],e=n(0),r=Object(e.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("为了协调事件、用户交互、脚本、UI 渲染、网络请求，用户代理必须使用事件循环机制（Event Loop）。")]),t._v(" "),n("p",[t._v("这种事件循环机制是由 JavaScript 的宿主环境来实现的，在浏览器运行环境中由浏览器内核引擎实现，而在 NodeJS 中则由 "),n("a",{attrs:{href:"https://github.com/libuv/libuv",target:"_blank",rel:"noopener noreferrer"}},[t._v("libuv"),n("OutboundLink")],1),t._v(" 引擎实现。")]),t._v(" "),n("p",[t._v("主线程运行时候，产生堆（Heap）和栈（Stack），栈中的代码调用各种外部 API，它们在任务队列中加入各种事件（Click、Load 和 Done）。只要栈中的代码执行完毕，主线程就会通过事件循环机制读取任务队列，依次执行那些事件所对应的回调函数。")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("JavaScript 的异步任务根据事件分类分为两种：宏任务（MacroTask）和微任务（MicroTask）")]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("宏任务与微任务的区别在于队列中事件的执行优先级。进入整体代码（宏任务）后，开始首次事件循环，当执行上下文栈清空后，事件循环机制会优先检测微任务队列中的事件并推至主线程执行，当微任务队列清空后，又会去检测宏任务队列中的事件，再将事件推至主线程中执行，而当执行上下文栈再次清空后，事件循环机制又会检测微任务队列，如此反复循环。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),n("p",[t._v("在 Node 中，事件循环表现出的状态与浏览器中大致相同。不同的是 Node 中有一套自己的模型。Node 中事件循环的实现是依靠的 "),n("a",{attrs:{href:"https://github.com/libuv/libuv",target:"_blank",rel:"noopener noreferrer"}},[t._v("libuv"),n("OutboundLink")],1),t._v(" 引擎。我们知道 Node 选择 Chrome V8 引擎作为 JavaScript 解释器，V8 引擎将 JavaScript 代码分析后去调用对应的 Node API，而这些 API 最后则由 libuv 引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。 因此实际上 Node 中的事件循环存在于 libuv 引擎中。")]),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("当一个消息需要太长时间才能处理完毕时，Web 应用就无法处理用户的交互，例如点击或滚动。浏览器用程序需要过长时间运行的对话框来缓解这个问题。一个很好的做法是缩短消息处理，并在可能的情况下将一个消息裁剪成多个消息。")]),t._v(" "),n("hr"),t._v(" "),t._m(12),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model",target:"_blank",rel:"noopener noreferrer"}},[t._v("📖 HTML Standard: Processing model"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop",target:"_blank",rel:"noopener noreferrer"}},[t._v("📖 MDN: EventLoop"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 The JavaScript Event Loop: Explained"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/33058983",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 详解 JavaScript 中的 Event Loop（事件循环）机制"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://cnodejs.org/topic/5a9108d78d6e16e56bb80882",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 不要混淆 Node.js 和浏览器中的 Event Loop"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.youtube.com/watch?v=u1kqx6AenYw",target:"_blank",rel:"noopener noreferrer"}},[t._v("🎥 Further Adventure of the Event Loop"),n("OutboundLink")],1)])])])},a,!1,null,null,null);s.default=r.exports}}]);