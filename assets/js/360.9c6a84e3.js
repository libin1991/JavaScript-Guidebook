(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{263:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"string-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" String 对象")]),t._v(" "),a("p",[t._v("String 对象是一个用于字符串或一个字符序列的构造函数。")]),t._v(" "),a("p",[t._v("String 对象是文本字符串的对象形式。String 对象允许操作和格式化文本字符串以及确定和定位字符串中的子字符串。")]),t._v(" "),a("p",[t._v("所有主流浏览器均支持该对象。")]),t._v(" "),a("h2",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("p",[a("strong",[t._v("用法一")]),t._v("：充当 "),a("code",[t._v("String")]),t._v(" 对象的"),a("strong",[t._v("构造函数")]),t._v("使用，用于结合 "),a("code",[t._v("new")]),t._v(" 关键字构造一个新的 "),a("code",[t._v("String")]),t._v(" 对象。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("new String( [ value ] )\n")])])]),a("p",[a("strong",[t._v("用法二")]),t._v("：当作"),a("strong",[t._v("普通函数")]),t._v("使用，其行为与"),a("strong",[t._v("用法一")]),t._v("(使用 "),a("code",[t._v("new")]),t._v(" 关键字)完全一致，相当于用法一省略了 "),a("code",[t._v("new")]),t._v(" 关键字。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("String( [ value ] )\n")])])]),a("h3",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数","aria-hidden":"true"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("value")])]),t._v(" "),a("td",[t._v("任意类型")]),t._v(" "),a("td",[t._v("任何可以被转换成字符串的值。")])])])]),t._v(" "),a("h3",{attrs:{id:"描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述","aria-hidden":"true"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),a("h4",{attrs:{id:"模板字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板字面量","aria-hidden":"true"}},[t._v("#")]),t._v(" 模板字面量")]),t._v(" "),a("p",[t._v("从 ECMAScript 2015 开始，字符串字面量也可以称为模板字面量：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`hello world`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`hello! world!`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("who"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`")])]),t._v(" escape "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`<a>")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("who"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("</a>`")])]),t._v("\n")])])]),a("h4",{attrs:{id:"转义字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 转义字符")]),t._v(" "),a("p",[t._v("除了普通的可打印字符以外，一些特殊有特殊功能的字符可以通过转义字符的形式放入字符串中：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("转义字符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("输出")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\0")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("空字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\'")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("单引号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v('\\"')])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("双引号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\\\")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("反斜杠")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\n")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("换行")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\r")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("回车")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\v")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("垂直制表符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\t")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("水平制表符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\b")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("退格")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\f")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("换页")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\uXXXX")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Unicode 码")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\u{X} ... \\u{XXXXXX}")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Unicode Codepoint")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("\\xXX")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Latin-1 字符(x小写)")])])])]),t._v(" "),a("p",[t._v("和其他语言不同，Javascript 的字符串不区分单引号和双引号，所以不论是单引号还是双引号的字符串，上面的转义字符都能运行 。")]),t._v(" "),a("h2",{attrs:{id:"string-实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-实例","aria-hidden":"true"}},[t._v("#")]),t._v(" String 实例")]),t._v(" "),a("h3",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("释义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("String.prototype.constructor")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回创建该对象的构造函数。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("String.prototype.length")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回字符串的长度(字符数)。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("String.prototype.N")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("用于访问第 N 个位置的字符，其中 N 是小于 length 和0之间的正整数。这些属性都是只读性质，不能编辑。")])])])]),t._v(" "),a("h3",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("释义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.charAt()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从一个字符串中返回指定位置的字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.charCodeAt()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回表示给定索引的字符的Unicode的值。（值的范围是0到65535）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.codePointAt()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回使用UTF-16编码的给定位置的值的非负整数。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.concat()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.includes()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("用于判断一个字符串里是否包含在另一个字符串中，根据情况返回 "),a("code",[t._v("true")]),t._v(" 和 "),a("code",[t._v("false")]),t._v("。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.endsWith()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("用于判断当前字符串是否是以另外一个给定的字符串结尾的，根据判断结果返回 "),a("code",[t._v("true")]),t._v(" 或 "),a("code",[t._v("false")]),t._v("。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.indexOf()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回调用 String 对象中第一个发现的指定值的索引值，如果没有找到则返回-1。从 "),a("code",[t._v("fromIndex")]),t._v(" 进行搜索。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.lastIndexOf()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回调用该方法的字符串中最后出现的位置，如果没有找到则返回-1。从该字符串的后面向前查找，从 "),a("code",[t._v("fromIndex")]),t._v(" 处开始。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.localeCompare()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.match()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("检索一个字符串与一个正则表达式的匹配项。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.normalize()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("按照指定一种 Unicode 正规形式将当前字符串正规化。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.padEnd()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.padStart()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的开头（右侧）开始填充。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.repeat()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.replace()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个由替换值替换一些或所有匹配的模式后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的函数。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.search()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.slice()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("摘取一个字符串区域（字符串的一部分），返回一个新的字符串。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.split()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用指定的分隔符字符串将一个 String 对象分割成字符串数组，以将字符串分割为子字符串，以确定每个拆分的位置。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.startsWith()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("判断字符串的起始位置是否匹配其他字符串中的字符，根据判断结果返回 "),a("code",[t._v("true")]),t._v(" 或 "),a("code",[t._v("false")]),t._v("。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.substr()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("通过指定字符数返回从指定位置开始到指定字符串数的字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.substring()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个字符串在开始索引到结束索引之间的一个子集，或从开始索引知道字符串的末尾的一个子集。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.toLocaleLowerCase()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("根据任何特定于语言环境的案例映射，返回调用字符串值转换为小写的值。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.toLocaleUpperCase()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("使用本地化的大小写映射规则将输入的字符串转化成大写形式并返回结果字符串。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.toLowerCase()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将字符串转换成小写并返回。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.toSource()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个对象文字代表着特定的对象。你可以使用这个返回值来创建新的对象。重写  "),a("code",[t._v("Object.prototype.toSource")]),t._v("  方法。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.toString()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回用字符串表示的特定对象。重写  "),a("code",[t._v("Object.prototype.toString")]),t._v("  方法。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.toUpperCase()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将调用该方法的字符串值转换为大写形式，并返回。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.trim()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从字符串的两端删除空白字符。在这个上下文的空白字符是所有的空白字符（"),a("code",[t._v("space")]),t._v("、"),a("code",[t._v("tab")]),t._v("、"),a("code",[t._v("no-break space")]),t._v("）。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.trimLeft()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("移除原字符串的左侧的连续空白符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.trimRight()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("移除原字符串的左侧的连续空白符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype.valueOf()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回特定对象的原始值。重写 "),a("code",[t._v("Object.prototype.valueOf")]),t._v(" 方法。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("String.prototype[@@iterator]\\()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回一个新的 Iterator 对象，它遍历字符串的代码点，返回每一行代码点 的字符串值。")])])])]),t._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("h3",{attrs:{id:"标准示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准示例","aria-hidden":"true"}},[t._v("#")]),t._v(" 标准示例")]),t._v(" "),a("h3",{attrs:{id:"从字符串中获取单个字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从字符串中获取单个字符","aria-hidden":"true"}},[t._v("#")]),t._v(" 从字符串中获取单个字符")]),t._v(" "),a("p",[t._v("获取字符串的某个字符有两种方法。 第一种是使用 charAt 方法：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "a"')]),t._v("\n")])])]),a("p",[t._v("另一种 (在ECMAScript 5中有所介绍) 是把字符串当作一个类似数组的对象，其中的每个字符对应一个数值索引：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// returns "a"')]),t._v("\n")])])]),a("p",[t._v("使用括号访问字符串不可以对其进行删除或添加，因为字符串对应未知的属性并不是可读或配置的。 (更多的信息请参阅 Object.defineProperty。 )")]),t._v(" "),a("h3",{attrs:{id:"长字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#长字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 长字符串")]),t._v(" "),a("p",[t._v("有时，你的代码可能含有很长的字符串。你可能想将这样的字符串写成多行，而不是让这一行无限延长或着被编辑器折叠。有两种方法可以做到这一点。")]),t._v(" "),a("ul",[a("li",[t._v("可以使用 "),a("code",[t._v("+")]),t._v(" 运算符将多个字符串连接起来。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" longString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a very long string which needs "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"to wrap across multiple lines because "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"otherwise my code is unreadable."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("可以在每行末尾使用反斜杠字符（"),a("code",[t._v("\\")]),t._v("），以指示字符串将在下一行继续。确保反斜杠后面没有空格或任何除换行符之外的字符或缩进；否则反斜杠将不会工作。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" longString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a very long string which needs \\\nto wrap across multiple lines because \\\notherwise my code is unreadable."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("使用这两种方式会创建相同的字符串。")])])}],!1,null,null,null);e.default=r.exports}}]);