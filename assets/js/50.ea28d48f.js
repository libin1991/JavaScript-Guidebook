(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{307:function(v,_,t){"use strict";t.r(_);var d=t(0),e=Object(d.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("div",{staticClass:"content"},[t("h2",{attrs:{id:"位运算移位运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位运算移位运算符","aria-hidden":"true"}},[v._v("#")]),v._v(" 位运算移位运算符")]),v._v(" "),t("p",[v._v("位运算符将它的操作数视为32位元的二进制串（0和1组成）而非十进制、八进制或十六进制数。例如：十进制数字 "),t("code",[v._v("9")]),v._v(" 用二进制表示为 "),t("code",[v._v("1001")]),v._v("，位运算符就是在这个二进制表示上执行运算，但是返回结果是标准的JavaScript数值。")]),v._v(" "),t("p",[t("strong",[v._v("位运算符")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("运算符")]),v._v(" "),t("th",[v._v("用法")]),v._v(" "),t("th",[v._v("描述")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("按位与")]),v._v(" "),t("td",[t("code",[v._v("a & b")])]),v._v(" "),t("td",[v._v("在 "),t("code",[v._v("a")]),v._v(" "),t("code",[v._v("b")]),v._v("的位表示中，每一个对应的位都为1则返回1， 否则返回0")])]),v._v(" "),t("tr",[t("td",[v._v("按位或")]),v._v(" "),t("td",[t("code",[v._v("a \\| b")])]),v._v(" "),t("td",[v._v("在"),t("code",[v._v("a")]),v._v(" "),t("code",[v._v("b")]),v._v("的位表示中，每一个对应的位，只要有一个为1则返回1， 否则返回0")])]),v._v(" "),t("tr",[t("td",[v._v("按位异或")]),v._v(" "),t("td",[t("code",[v._v("a ^ b")])]),v._v(" "),t("td",[v._v("在"),t("code",[v._v("a")]),v._v(" "),t("code",[v._v("b")]),v._v("的位表示中，每一个对应的位，两个不相同则返回1，相同则返回0")])]),v._v(" "),t("tr",[t("td",[v._v("按位非")]),v._v(" "),t("td",[t("code",[v._v("~ a")])]),v._v(" "),t("td",[v._v("反转被操作数的位")])]),v._v(" "),t("tr",[t("td",[v._v("左移")]),v._v(" "),t("td",[t("code",[v._v("a << b")])]),v._v(" "),t("td",[v._v("将a的二进制串向左移动b位,右边移入0")])]),v._v(" "),t("tr",[t("td",[v._v("算术右移")]),v._v(" "),t("td",[t("code",[v._v("a >> b")])]),v._v(" "),t("td",[v._v("把a的二进制表示向右移动 "),t("code",[v._v("b")]),v._v(" 位，丢弃被移出的所有位")])]),v._v(" "),t("tr",[t("td",[v._v("无符号右移")]),v._v(" "),t("td",[t("code",[v._v("a >>> b")])]),v._v(" "),t("td",[v._v("把 "),t("code",[v._v("a")]),v._v(" 的二进制表示向右移动 "),t("code",[v._v("b")]),v._v(" 位，丢弃被移出的所有位，并把左边空出的位都填充为0")])])])]),v._v(" "),t("h2",{attrs:{id:"位逻辑运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位逻辑运算符","aria-hidden":"true"}},[v._v("#")]),v._v(" 位逻辑运算符")]),v._v(" "),t("p",[v._v("概念上来讲, 位逻辑运算符工作流程如下:")]),v._v(" "),t("ul",[t("li",[v._v("操作数被转换为32bit整數，以位序列（0和1组成）表示。若超過32bits，則取低位32bit，如下所示：")])]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v("Before"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("11100110111110100000000000000110000000000001")]),v._v("\nAfter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("              "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("10100000000000000110000000000001")]),v._v("\n")])])]),t("ul",[t("li",[v._v("第一个操作数的每一位都与第二个操作数的对应位组对: 第一位对应第一位，第二位对应第二位，以此类推。")]),v._v(" "),t("li",[v._v('运算符被应用到每一对"位"上， 最终的运算结果由每一对“位”的运算结果组合起来。')])]),v._v(" "),t("p",[v._v("例如，十进制数9的二进制表示是1001，十进制数15的二进制表示是1111。因此，当位运算符应用到这两个值时，结果如下：")]),v._v(" "),t("p",[t("strong",[v._v("位运算符范例")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("表达式")]),v._v(" "),t("th",[v._v("结果")]),v._v(" "),t("th",[v._v("二进制描述")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("code",[v._v("15 & 9")])]),v._v(" "),t("td",[t("code",[v._v("9")])]),v._v(" "),t("td",[t("code",[v._v("1111 & 1001 = 1001")])])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("15 \\| 9")])]),v._v(" "),t("td",[t("code",[v._v("15")])]),v._v(" "),t("td",[t("code",[v._v("1111 \\| 1001 = 1111")])])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("15 ^ 9")])]),v._v(" "),t("td",[t("code",[v._v("6")])]),v._v(" "),t("td",[t("code",[v._v("1111 ^ 1001 = 0110")])])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("~15")])]),v._v(" "),t("td",[t("code",[v._v("-16")])]),v._v(" "),t("td",[t("code",[v._v("~00000000...00001111 = 11111111...11110000")])])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("~9")])]),v._v(" "),t("td",[t("code",[v._v("-10")])]),v._v(" "),t("td",[t("code",[v._v("~00000000...00001001 = 11111111...11110110")])])])])]),v._v(" "),t("p",[v._v('★ 位运算符"非"将所有的32位取反，而值的最高位（最左边的一位）为1则表示负数（2-补码表示法）。')]),v._v(" "),t("h2",{attrs:{id:"移位运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#移位运算符","aria-hidden":"true"}},[v._v("#")]),v._v(" 移位运算符")]),v._v(" "),t("p",[v._v("移位运算符带两个操作数：第一个是待移位的数，第二个是指定第一个数要被移多少位的数。移位的方向由运算符来控制.")]),v._v(" "),t("p",[v._v("移位运算符把操作数转为32bit整数，然后得出一个与待移位数相同种类的值。")]),v._v(" "),t("p",[t("strong",[v._v("移位运算符")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("运算符")]),v._v(" "),t("th",[v._v("描述")]),v._v(" "),t("th",[v._v("范例")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("左移"),t("code",[v._v("<<")])]),v._v(" "),t("td",[v._v("将第一个操作数向左移动指定数量的位. 左边移出位被抛弃. 左边移出的几位被丢弃.右边多出的空位由0补齐")]),v._v(" "),t("td",[t("code",[v._v("9<<2")]),v._v(" 产生36，因为 1001 移位2比特向左变为 "),t("code",[v._v("100100")]),v._v("，它是36。")])]),v._v(" "),t("tr",[t("td",[v._v("带符号右移"),t("code",[v._v(">>")])]),v._v(" "),t("td",[v._v("将第一个操作数向右移动指定数量的位。右边移出位被抛弃。 左边多出的空位由原值的最左边数字补齐.")]),v._v(" "),t("td",[t("code",[v._v("9>>2")]),v._v(" 产生2，因为 "),t("code",[v._v("1001")]),v._v(" 移位2位向右变为10，其是2。同样，-9>>2产生-3，由于符号被保留。")])]),v._v(" "),t("tr",[t("td",[v._v("带零右移"),t("code",[v._v(">>>")])]),v._v(" "),t("td",[v._v("将第一个操作数向右移动指定数量的位。右边移出位被抛弃。 左边多出的空位由0补齐。")]),v._v(" "),t("td",[t("code",[v._v("19>>>2")]),v._v("  产生4，因为 "),t("code",[v._v("10011")]),v._v(" 移位2位向右变为 "),t("code",[v._v("100")]),v._v("，它是4。对非负数值，补零右移和带符号右移产生相同结果。")])])])])])}],!1,null,null,null);_.default=e.exports}}]);