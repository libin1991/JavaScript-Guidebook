(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{205:function(t,s,a){t.exports=a.p+"assets/img/cd161a19-bd56-44b1-8e91-dc64cba2d9e0.977a364e.png"},498:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"词法作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域","aria-hidden":"true"}},[this._v("#")]),this._v(" 词法作用域")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("a",{attrs:{href:"#%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F"}},[this._v("词法作用域")])]),this._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8A%A8%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F"}},[this._v("动态作用域")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("JavaScript 采用"),s("strong",[this._v("词法作用域")]),this._v("（Lexical Scope），也称为"),s("strong",[this._v("静态作用域")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"词法作用域-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 词法作用域")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("大部分标准语言编译器的第一个工作阶段叫作"),s("strong",[this._v("词法化")]),this._v("（也叫单词化）。词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("🌰 "),s("strong",[this._v("标准示例：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("brc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2, 4, 12")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(205),alt:"作用域气泡"}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("包含着整个全局作用域，其中只有一个标识符："),a("code",[t._v("foo")])]),t._v(" "),a("li",[t._v("包含着 "),a("code",[t._v("foo")]),t._v(" 所创建的作用域，其中有三个标识符："),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("bar")]),t._v(" 和 "),a("code",[t._v("b")])]),t._v(" "),a("li",[t._v("包含着 "),a("code",[t._v("bar")]),t._v(" 所创建的作用域，其中只有一个标识符："),a("code",[t._v("c")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("bar")]),this._v(" 的气泡被完全包含在 "),s("code",[this._v("foo")]),this._v(" 所创建的气泡中，唯一的原因是那里就是我们希望定义函数 "),s("code",[this._v("bar")]),this._v(" 的位置。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找","aria-hidden":"true"}},[this._v("#")]),this._v(" 查找")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在上个代码片段中，引擎执行 "),a("code",[t._v("console.log")]),t._v(" 声明，并依次查找 "),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("b")]),t._v(" 和 "),a("code",[t._v("c")]),t._v(" 三个变量的引用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("它首先从最内部的作用域，也就是 "),a("code",[t._v("bar(…)")]),t._v(" 函数的作用域气泡开始查找。")]),t._v(" "),a("li",[t._v("引擎无法在这里找到 "),a("code",[t._v("a")]),t._v("，因此会去上一级到所嵌套的 "),a("code",[t._v("foo(…)")]),t._v("  的作用域中继续查找。在这里找到了 "),a("code",[t._v("a")]),t._v("，因此引擎使用了这个引用。")]),t._v(" "),a("li",[t._v("对 "),a("code",[t._v("b")]),t._v(" 来讲也是一样的。")]),t._v(" "),a("li",[t._v("而对 "),a("code",[t._v("c")]),t._v(" 来说，引擎在 "),a("code",[t._v("bar(…)")]),t._v(" 中就找到了它。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果 "),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("c")]),t._v(" 都存在于 "),a("code",[t._v("bar(…)")]),t._v(" 和 "),a("code",[t._v("foo(…)")]),t._v(" 的内部，"),a("code",[t._v("console.log(…)")]),t._v(" 就可以直接使用 "),a("code",[t._v("bar(…)")]),t._v(" 中的变量，而无需到外面的 "),a("code",[t._v("foo(…)")]),t._v(" 中查找。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"遮蔽"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遮蔽","aria-hidden":"true"}},[this._v("#")]),this._v(" 遮蔽")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("作用域查找会在找到第一个匹配的标识符时停止")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而在多层嵌套作用域中允许定义同名标识符，称为 "),s("strong",[this._v("遮蔽效应")]),this._v("（内部的标识符遮蔽了外部的标识符）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("🌰 "),s("strong",[this._v("标准示例：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(".")]),this._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v(";")]),this._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("词法作用域查找只会查找一级标识符，比如 "),a("code",[t._v("a")]),t._v("、"),a("code",[t._v("b")]),t._v(" 和 "),a("code",[t._v("c")]),t._v("。如果代码中引用了 "),a("code",[t._v("foo.bar.baz")]),t._v("，词法作用域查找只会试图查找 "),a("code",[t._v("foo")]),t._v(" 标识符，找到这个变量后，对象属性访问规则会分别接管对 "),a("code",[t._v("bar")]),t._v(" 和 "),a("code",[t._v("baz")]),t._v(" 属性的访问。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"动态作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态作用域","aria-hidden":"true"}},[this._v("#")]),this._v(" 动态作用域")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("动态作用域")]),this._v("并不关心函数和作用域是如何声明以及在何处声明，它只关心它们从何处调用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("如果处于词法作用域，变量 "),a("code",[t._v("a")]),t._v(" 首先在 "),a("code",[t._v("foo()")]),t._v(" 函数中查找，没有找到。于是顺着作用域链到全局作用域中查找，找到并赋值为 2。所以控制台输出 2。")]),t._v(" "),a("li",[t._v("如果处于动态作用域，同样地，变量 "),a("code",[t._v("a")]),t._v(" 首先在 "),a("code",[t._v("foo()")]),t._v(" 中查找，没有找到。这里会顺着调用栈在调用 "),a("code",[t._v("foo()")]),t._v(" 函数的地方，也就是 "),a("code",[t._v("bar()")]),t._v(" 函数中查找，找到并赋值为 3。所以控制台输出 3")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("两种作用域的区别，简而言之，词法作用域是在"),s("strong",[this._v("定义")]),this._v("时确定的，而动态作用域是在"),s("strong",[this._v("运行")]),this._v("时确定的")])}],e=a(0),_=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("作用域共有两种主要的工作模式。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("因为 JavaScript 采用的是词法作用域，因此函数的作用域在函数定义的时候就决定了。而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("简单来说，词法作用域就是定义在词法阶段的作用域。换句话来说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况下时这样的）。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),a("p",[t._v("在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们想象成几个逐级包含的气泡。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("作用域气泡由其对应的作用域代码写在哪里决定，它们是逐级包含的。现在只需要假设每一个函数都会创建一个新的作用域气泡就好了。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("作用域气泡的结构和互相之间的位置关系给引擎提供了足够的位置信息，引擎利用这些信息来查找标识符的位置。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),a("p",[t._v("抛开遮蔽效应，作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上层作用域进行查询，直到遇见第一个匹配的标识符为止。")]),t._v(" "),a("p",[t._v("全局变量会自动成为全局对象的属性（比如浏览器中的 Window 对象），因此可以不直接使用全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。")]),t._v(" "),t._m(17),t._v(" "),t._m(18),a("p",[t._v("通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。")]),t._v(" "),a("p",[t._v("无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),a("p",[t._v("词法作用域最重要的特征是它的定义过程发生在代码的书写阶段。")]),t._v(" "),a("p",[t._v("那为什么要介绍动态作用域呢？")]),t._v(" "),a("p",[t._v("实际上动态作用域是 Javascript 另一个重要机制 "),a("router-link",{attrs:{to:"./../execution/this.html"}},[t._v("this")]),t._v(" 的表亲。作用域混乱多数是因为词法作用域和 "),a("code",[t._v("this")]),t._v(" 机制相混淆。")],1),t._v(" "),t._m(21),t._v(" "),a("p",[t._v("换句话说，"),a("router-link",{attrs:{to:"./../execution/scope-chain.html"}},[t._v("作用域链")]),t._v(" 是基于"),a("strong",[t._v("调用栈")]),t._v("的，而不是代码中的作用域嵌套。")],1),t._v(" "),t._m(22),t._m(23),t._v(" "),t._m(24)])},n,!1,null,null,null);s.default=_.exports}}]);