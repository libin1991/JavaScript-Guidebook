(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{336:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"更新表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 更新表达式")]),t._v(" "),a("p",[t._v("更新表达式包括前自增/自减运算符和后自增/自减运算符。")]),t._v(" "),a("p",[t._v("假定 "),a("code",[t._v("i")]),t._v(" 的初始值为6。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("表达式")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("前自增运算符")]),t._v(" "),a("td",[a("code",[t._v("++i")])]),t._v(" "),a("td",[t._v("7")])]),t._v(" "),a("tr",[a("td",[t._v("前自减运算符")]),t._v(" "),a("td",[a("code",[t._v("--i")])]),t._v(" "),a("td",[t._v("5")])]),t._v(" "),a("tr",[a("td",[t._v("后自增运算符")]),t._v(" "),a("td",[a("code",[t._v("i++")])]),t._v(" "),a("td",[t._v("7")])]),t._v(" "),a("tr",[a("td",[t._v("后自减运算符")]),t._v(" "),a("td",[a("code",[t._v("i--")])]),t._v(" "),a("td",[t._v("5")])])])]),t._v(" "),a("p",[t._v("前自增/前自减与后自增/后自减的异同点：")]),t._v(" "),a("ul",[a("li",[t._v("相同点：无论是前自增/前自减还是后自增/后自减，对于变量而言，没有区别，都是自身"),a("code",[t._v("+1")]),t._v("/"),a("code",[t._v("-1")])]),t._v(" "),a("li",[t._v("不同点：\n"),a("ul",[a("li",[t._v("前自增/前自减：先自增/自减（变量自身），后赋值（将变量的值赋值给自增表达式的结果）")]),t._v(" "),a("li",[t._v("后自增/后自减：先赋值，后自增/自减")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前自增")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后自增")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),a("p",[t._v('为什么后自增后自减优先级很高却"后操作"')]),t._v(" "),a("p",[t._v("前置操作返回加（减）1的值，所以返回对象本身，这是左值（"),a("code",[t._v("++i")]),t._v("，先自增后操作）")]),t._v(" "),a("p",[t._v("后置操作为右值，同样对其操作数 "),a("code",[t._v("+1")]),t._v("/"),a("code",[t._v("-1")]),t._v("，但操作后产生操作数原来的、未修改的值为表达式的结果（可理解为 "),a("code",[t._v("i++")]),t._v(" 为先操作，后自增）。实际上，由于后自增（减）优先级很高，因此会先自增（减），但在自增（减）前会创建一个副本，用来保存操作数原来的值，操作后会返回副本的值给表达式。")]),t._v(" "),a("p",[t._v("建议：只有在必要时才使用后置操作符，尽量使用前置操作符。因为前置操作需要做的工作更少，而后置操作必须先保存操作数原来的值，对于int型对象和指针，编译器会优化掉这项额外的工作，但对于更多复杂的迭代器类型，这种额外的工作可能会花费更大的代价。")])])}],!1,null,null,null);s.default=e.exports}}]);