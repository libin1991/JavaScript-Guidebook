(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{206:function(t,e,r){t.exports=r.p+"assets/img/2112846c-e5a6-4d2a-aec7-95763b34a981.da078fa3.png"},499:function(t,e,r){"use strict";r.r(e);var i=[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"并发模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并发模型","aria-hidden":"true"}},[this._v("#")]),this._v(" 并发模型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本概念")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("进程（Process）")]),this._v("：进程是系统资源分配和调度的单元。一个运行着的程序就对应了一个进程。一个进程包括了运行中的程序和程序所使用到的内存和系统资源。")]),this._v(" "),e("li",[e("strong",[this._v("线程（Thread）")]),this._v("：线程是进程下的执行者，一个进程至少开启一个线程（主线程），也可以开启多个线程。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("并行（Parallelism）")]),this._v("：指程序的运行状态，在同一时间内有几件事情并行在处理。由于一个线程在同一时间只能处理一件事情，所以并行需要多个线程在同一时间执行多件事情。")]),this._v(" "),e("li",[e("strong",[this._v("并发（Concurrency）")]),this._v("：指程序的设计结构，在同一时间内多件事情能被交替地处理。重点是，在某个时间内只有一件事情在执行。比如单核 CPU 能实现多任务运行的过程就是并发。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("阻塞（Blocking）")]),this._v("：阻塞是指调用在等待的过程中线程被挂起（CPU 资源被分配到其他地方去）")]),this._v(" "),e("li",[e("strong",[this._v("非阻塞（Non-blocking）")]),this._v("：非阻塞是指等待的过程 CPU 资源还在该线程中，线程还能做其他的事情")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("单线程")]),this._v("：从头执行到尾，逐行执行，如果其中一行代码报错，那么剩下代码将不再执行。同时容易代码阻塞。")]),this._v(" "),e("li",[e("strong",[this._v("多线程")]),this._v("：代码运行的环境不同，各线程独立，互不影响，避免阻塞。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("同步（Synchronous）")]),this._v("：程序发出调用的时候，一直等待直到返回结果，没有结果之前不会返回。也就是，同步时调用者主动等待调用过程，且能立即得到结果的。")]),this._v(" "),e("li",[e("strong",[this._v("异步（Asynchronous）")]),this._v("：程序发出调用之后，无法立即得到结果，需要额外的操作才能得到预期的结果是为异步。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"运行环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行环境","aria-hidden":"true"}},[this._v("#")]),this._v(" 运行环境")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"浏览器线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器线程","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器线程")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("渲染引擎线程：负责页面的渲染")]),t._v(" "),r("li",[t._v("JavaScript 引擎线程：负责 JavaScript 的解析和执行")]),t._v(" "),r("li",[t._v("定时触发器线程：处理定时事件，比如 "),r("code",[t._v("setTimeout")]),t._v("、"),r("code",[t._v("setInterval")])]),t._v(" "),r("li",[t._v("浏览器事件触发线程：处理 DOM 事件")]),t._v(" "),r("li",[t._v("异步 HTTP 请求线程：处理 HTTP 请求")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"内核引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内核引擎","aria-hidden":"true"}},[this._v("#")]),this._v(" 内核引擎")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"center"}},[t._v("浏览器厂商")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("渲染引擎")]),t._v(" "),r("th",{staticStyle:{"text-align":"center"}},[t._v("JavaScript 解释器")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("Chrome")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("Webkit => Blink")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("V8")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("Safari")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("Webkit")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("Nitro")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("Firefox")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("Gecko")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("SpiderMonky / TraceMonkey / JaegerMonkey")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("Opera")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("Presto => Blink")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("Linear A / Linear B / Futhark / Carakan")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("Internet Explorer")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("Trident => EdgeHTML")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("JScript / Chakra（9+）")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("Edge")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("EdgeHTML => Chromium")]),t._v(" "),r("td",{staticStyle:{"text-align":"center"}},[t._v("Chakra")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注：Webkit 引擎包含 WebCore 排版引擎及 JavaScript Core 解析引擎")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"单线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单线程","aria-hidden":"true"}},[this._v("#")]),this._v(" 单线程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("JavaScript 的"),e("strong",[this._v("单线程")]),this._v("，与它的用途有关。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准呢？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("⚠️ "),e("strong",[this._v("注意")]),this._v("： 需要注意的是，JavaScript 的单线程是指一个程序进程（在浏览器运行环境中运行的就是浏览器进程）中只有一个 JavaScript 的执行线程，同一时刻内只会有一段 JavaScript 代码在执行。而异步机制是运行环境的两个或以上常驻线程共同完成的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"任务队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#任务队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 任务队列")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("同步任务（Synchronous）")]),this._v("：同步任务在主线程上调用之后需要一直等待，只有当前任务执行完毕后，才能执行下一个任务")]),this._v(" "),e("li",[e("strong",[this._v("异步任务（Asynchronous）")]),this._v("：异步任务会在主线程先执行一部分，然后退出主线程至专用线程中执行。在异步任务准备就绪后，会被推进任务队列等待（Task Queue），当主线程空闲时，JavaScript 解释器会执行一次事件循环（EventLoop）将事件队列中首个事件推进主线程执行")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("具体来说，"),e("strong",[this._v("异步执行的运行机制")]),this._v("如下：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:r(206),alt:"异步任务执行机制图解"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("参考资料：")])])}],a=r(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),r("p",[t._v("在了解 JavaScript 单线程、非阻塞机制之前，先了解几组易混淆的概念。")]),t._v(" "),r("p",[t._v("进程和线程的概念以及关系：")]),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("并行和并发的概念：")]),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("阻塞和非阻塞的概念：")]),t._v(" "),t._m(4),t._v(" "),r("p",[t._v("再来区分单线程和多线程的区别：")]),t._v(" "),t._m(5),t._v(" "),r("p",[t._v("同步与异步的概念：")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),r("p",[t._v("JavaScript 的运行通常是在浏览器环境中进行的，具体由 JavaScript 引擎去解析和运行。")]),t._v(" "),t._m(8),t._v(" "),r("p",[t._v("目前最为流行的浏览器为：Chrome、IE、Safari、Firefox、Opera。浏览器的内核是多线程的，通常由以下几个常驻的线程组成：")]),t._v(" "),t._m(9),t._v(" "),r("p",[t._v("需要注意的是，渲染线程和 JavaScript 引擎线程是互斥的。渲染线程在执行任务的时候，JavaScript 引擎线程会被挂起。因为 JavaScript 可以操作 DOM，若在渲染中 JavaScript 处理了 DOM，浏览器可能会不知所措了。")]),t._v(" "),t._m(10),t._v(" "),r("p",[t._v("通常讲到浏览器的时候，我们会说到两个浏览器的核心组件：渲染引擎（Rendering Engine）和 JavaScript 解释器（JavaScript Interpreter）。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),r("p",[t._v("不同的渲染引擎对同一个样式的实现不一致，就导致了经常被人诟病的浏览器样式兼容性问题。")]),t._v(" "),r("p",[t._v("JavaScript 解释器可以说是 JavaScript 虚拟机，负责 JavaScript 代码的解析和执行。这里 "),r("router-link",{attrs:{to:"./../compilation/compilation.html"}},[t._v("编译阶段")]),t._v(" 有详细解读。")],1),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),r("p",[t._v("所以，为了避免复杂性，从一诞生，JavaScript 运行环境就是单线程，这已经成了这门语言的核心特征，将来也不会改变。")]),t._v(" "),r("p",[t._v("为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),r("p",[t._v("JavaScript 中的程序任务可以分为两种：")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),r("ol",[r("li",[t._v("所有同步任务及异步任务按照 "),r("router-link",{attrs:{to:"./../compilation/compilation.html#编译原理"}},[t._v("编译原理")]),t._v(" 在主线程上执行，形成一个 "),r("router-link",{attrs:{to:"./../execution/execution-context-stack.html"}},[t._v("执行上下文栈")]),t._v("（Execution Context Stack）")],1),t._v(" "),r("li",[t._v("同步任务执行完成并返回结果后退出执行上下文栈；异步任务执行一部分后，退出主线程的执行上下文栈，推进至运行环境的专用线程中继续执行")]),t._v(" "),r("li",[t._v("当运行环境的专用线程中的异步任务准备就绪后，将被推至任务队列（Task Queue）中等待执行")]),t._v(" "),r("li",[t._v("主线程的执行上下文栈中的所有任务执行完毕后，JavaScript 解释器就会通过事件循环机制检查任务队列中是否存在等待执行的事件。如果存在，则队首的异步任务将结束等待状态，进入执行上下文执行")]),t._v(" "),r("li",[t._v("JavaScript 主线程运行期间将不断重复上面第四步")])]),t._v(" "),t._m(19),t._v(" "),r("hr"),t._v(" "),t._m(20),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://hijiangtao.github.io/2018/01/08/JavaScript-and-Browser-Engines-with-Threads/",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 聊聊 JavaScript 与浏览器的那些事：引擎与线程"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27035708",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 JavaScript 单线程异步的背后——事件循环机制"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/10/event-loop.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 JavaScript 运行机制详解：再谈 Event Loop"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=8aGhZQkoFbQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("🎥 Philip Roverts: What the heck is the event loop anyway"),r("OutboundLink")],1)])])])},i,!1,null,null,null);e.default=n.exports}}]);